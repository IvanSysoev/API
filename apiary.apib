FORMAT: 1A
HOST: http://example.net

# so24apis:

# TOKEN API [/api/client/edit/{firstname}{surname}{phone}{password}{photo}]
<hr/>

### Базовая информация [PUT]

+ Response 200

    + Body
    
            Во всех запросах должны быть указаны заголовки:
            Authorization: Bearer #TOKEN#
            Accept: application/json
            Здесь вместо '#TOKEN#' должен быть указан токен переданный при регистрации/входе
            Заголовок "Authorization" не указывается в запросах для которых #TOKEN# еще не выдан:
            api/register/password - регистрация с логином и паролем
            api/login/password - аутентификация по логину и паролю
            api/login/social - аутентификация через соц сети (регистрирует если не был создан аккаунт)
            
            =====================================

            Ответ
            Ответ в формате json имеет следующие обязательные параметры:
            "message" - string - Строка с сообщением от сервера
            "data" - mixed - Формат может быть любой и зависит от конкретного запроса API
            "errors" - array - Массив ошибок
            
            Пример ответа
                {
                    "message": "Saved",
                    "data": null,
                    "errors":[]
                }

            =====================================
            
            Ошибки
            Ошибки указываются в массиве. В одном ответе может быть несколько ошибок, в том числе и с одним и тем же кодом (пример - ошибки валидации формы ввода).
            
            Обязательные параметры в объекте конкретной ошибки:
            "code" - integer - Код ошибки из списка указанного ниже,
            "message" - string - Строка с описанием ошибки,
            "data" - mixed - Формат зависит от кода ошибки и может содержать дополнительные данные для обработки ошибки.
            
            Список ошибок
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1004 'Unsupported social provider',
                1005 'The user credentials were incorrect.',
                1006 'The user credentials were incorrect.'
                1007 'Nothing to change',
                1008 'Wrong file format',
                1009 'Field connection with file-server',
                1010 'Can`t save client at this moment. Try again later.',
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1015 'Phone verification is required.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

            Пример ответа с ошибкой:
            {
                "message": "no message",
                "data": "no data",
                "errors": [
                    {
                        "code": 1007,
                        "message": "Nothing to change",
                        "data": "Nothing to change"
                    },
                    {
                        "code": 1008,
                        "message": "Wrong file format",
                        "data": "Wrong file format"
                    }
                ]
            }
            
            Если пользователь не авторизован (не верный токен, не указан токен и т.д.).
            Ответ будет иметь статус: 401 Unauthorized
            Тело ответа будет содержать:
            {
                "message": "The user credentials were incorrect.",
                "data": null,
                "errors": [
                    {
                        "code": 1005,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect. Check social access_token."
                    }
                ]
            }

### Регистрация (username + password) [POST/{client_id}/{client_secret}/{phone}/{firstname}/{surname}/{patronymic}/{email}/{password}/{otp}/{fcm_token}/ (use: base/api/auth/register)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + phone (required, (integer)) ... *телефон длина зависит от настроек партнера*
    + firstname (required, (string)) ... *имя*
    + surname (optional, (string)) ... *фамилия*
    + patronymic (optional, (string)) ... *отчество*
    + email (optional, (string)) ... *Email*
    + password (required, (string)) ... *пароль*
    + otp (optional, (string)) ... *код otp one time password. Только если у партнера включена опция "регистрация с otp"*
    + fcm_token (optional, (string)) ... *firebase cloud message token. need to proper work mobile apps (for example, chat don`t work without fcm token)*
    
+ Response 200 (application/json)
    + Headers
    
            Location: base/api/auth/register
            Method: POST

    + Body
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1006 'The user credentials were incorrect.',
                1010 'Can`t save client at this moment. Try again later.'
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1015 'Phone verification is required.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

    + Schema

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "phone",
                        "data": "Такое значения поля phone уже занято"
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string",
                    "id": 1090215,
                    "codes_not_viewed": 0,
                    "gift": false,
                    "firstname": "Василий",
                    "surname": "Зеленцов",
                    "patronymic": null,
                    "phone": "380990000001",
                    "phone_verified": 1,
                    "email": null,
                    "isbackup": 0,
                    "backup_date": "0",
                    "backup_link": "",
                    "user_photo": ""
                },
                "errors": []
            }


### Аутентификация по логину и паролю [POST/{client_id}/{client_secret}/{phone}/{password}/{otp}/{fcm_token}/ (use: base/api/auth/login_password)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + password (required, (string)) ... *пароль*
    + phone (optional, (integer)) ... *телефон длина зависит от настроек партнера. Только если у партнера включена опция "регистрация с otp" + у пользователя нет привязанного верифицированного телефона.*
    + otp (optional, (string)) ... *код otp one time password. Только если у партнера включена опция "регистрация с otp" + у пользователя нет привязанного верифицированного телефона."*
    + fcm_token (optional, (string)) ... *firebase cloud message token. need to proper work mobile apps (for example, chat don`t work without fcm token)*
    
+ Response 200 (application/json)
    + Headers
    
            Location: base/api/auth/login_password
            Method: POST

    + Body
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1006 'The user credentials were incorrect.',
                1010 'Can`t save client at this moment. Try again later.'
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1015 'Phone verification is required.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

    + Schema

            {
                "message": "no message",
                "data": null,
                "errors": [
                    {
                        "code": 1006,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect."
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string",
                    "id": 1090215,
                    "codes_not_viewed": 0,
                    "gift": false,
                    "firstname": "Василий",
                    "surname": "Зеленцов",
                    "patronymic": null,
                    "phone": "380990000001",
                    "phone_verified": 1,
                    "email": null,
                    "isbackup": 0,
                    "backup_date": "0",
                    "backup_link": "",
                    "user_photo": ""
                },
                "errors": []
            }

### Аутентификация/регистрация соцсети [POST/{client_id}/{client_secret}/{provider}/{accessToken}/{serverAuthCode}/{otp}/{phone}/{fcm_token}/ (use: base/api/auth/login_social)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + provider (required, (string)) ... *кодовое имя соцсети, например 'google' (список ниже)*
    + accessToken (optional, (string)) ... *токен выданный соц сетью (в запросе должен быть accessToken или serverAuthCode)*
    + serverAuthCode (optional, (string)) ... *serverAuthCode выданный соц сетью (в запросе должен быть accessToken или serverAuthCode)*
    + phone (optional, (integer)) ... *телефон длина зависит от настроек партнера. Только если у партнера включена опция "регистрация с otp" + у пользователя нет привязанного верифицированного телефона.*
    + otp (optional, (string)) ... *код otp one time password. Только если у партнера включена опция "регистрация с otp. Только если у пользователя нет привязанного верифицированного телефона."*
    + fcm_token (optional, (string)) ... *firebase cloud message token. need to proper work mobile apps (for example, chat don't work without fcm token)*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/auth/login_social
            Method: POST

    + Body
    
            Кодовые имена соцсетей:
                'google',
                'facebook',
                'vkontakte',
                'odnoklassniki'
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1004 'Unsupported social provider',
                1005 'The user credentials were incorrect. Check social access_token.',
                1006 'The user credentials were incorrect.',
                1010 'Can`t save client at this moment. Try again later.'
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1015 'Phone verification is required.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

    + Schema

            {
                "message": "no message",
                "data": null,
                "errors": [
                    {
                        "code": 1006,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect."
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string",
                    "id": 1090215,
                    "codes_not_viewed": 0,
                    "gift": false,
                    "firstname": "Василий",
                    "surname": "Зеленцов",
                    "patronymic": null,
                    "phone": "380990000001",
                    "phone_verified": 1,
                    "email": null,
                    "isbackup": 0,
                    "backup_date": "0",
                    "backup_link": "",
                    "user_photo": ""
                },
                "errors": []
            }

### Восстановление пароля [POST/{client_id}/{client_secret}/{phone}/{otp}/{fcm_token}/ (use: base/api/auth/forgot_password)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + phone (required, (integer)) ... *телефон длина зависит от настроек партнера.*
    + otp (required, (string)) ... *код otp one time password.*
    + fcm_token (optional, (string)) ... *firebase cloud message token. need to proper work mobile apps (for example, chat don`t work without fcm token)*
    
+ Response 200 (application/json)
    + Headers
    
            Location: base/api/auth/forgot_password
            Method: POST

    + Body
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1006 'The user credentials were incorrect.',
                1010 'Can`t save client at this moment. Try again later.'
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1015 'Phone verification is required.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

    + Schema

            {
                "message": "no message",
                "data": null,
                "errors": [
                    {
                        "code": 1006,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect."
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string",
                    "id": 1090215,
                    "codes_not_viewed": 0,
                    "gift": false,
                    "firstname": "Василий",
                    "surname": "Зеленцов",
                    "patronymic": null,
                    "phone": "380990000001",
                    "phone_verified": 1,
                    "email": null,
                    "isbackup": 0,
                    "backup_date": "0",
                    "backup_link": "",
                    "user_photo": ""
                },
                "errors": []
            }

### Изменение данных пользователя [POST/{firstname}/{surname}/{password}/{photo}/{otp}/{phone}/{card}/ (use: base/api/client/edit)]

+ Parameters
    + firstname (optional, (string)) ... *имя*
    + surname (optional, (string)) ... *фамилия*
    + password (optional, (string)) ... *пароль минимум 6 символов*
    + photo (optional, (string)) ... *фото пользователя в формате **Base64***
    + phone (optional, (integer)) ... *телефон длина зависит от настроек партнера. Нужен при изменении телефона.*
    + otp (optional, (string)) ... *код otp one time password. Только если у партнера включена опция "регистрация с otp + пользователь меняет телефон."*
    + card (optional, (string)) ... *Только для 5элемент. Номер бонусной карты. Должен быть привязан к телефону phone у партнера*
    
+ Response 200 (application/json)
    + Headers
    
            Location: base/api/client/edit
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1001 'Validation error',
                1007 'Nothing to change',
                1008 'Wrong file format',
                1009 'Field connection with file-server',
                1010 'Can`t save client at this moment. Try again later.'
                1011 'Wrong otp number.',
                1012 'Allowed interval between sms - 1 minute',
                1013 'Too many OTP sms requested. Try again later',
                1014 'OTP required. OTP code sended to given phone.',
                1016 'Need phone for verification.',
                1017 'Client with provided phone is not registered.',
                1018 'Too many OTP validations. Try again later.',

    + Schema

            {
                "message": "Saved",
                "data": null,
                "errors": (array)
            }
            
            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "card",
                        "data": "Неверный номер бонусной карты или он привязан к другому телефону"
                    }
                ]
            }


### Получение данных пользователя [GET/ (use: base/api/client/info)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/client/info
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            Параметры только для 5элемент:
                "codes_not_viewed" - кол-во выбранных но не просмотренных подарочных кодов,
                "gift": bool - есть или нет возможность выдачи подарка. Для true должны быть в наличии подарочные коды и available_gifts > 0,
                "available_gifts" - количество подарков,
                "not_read_notifications_count" - количество не прочитанных уведомлений,
                "card" - номер бонусной карты,

    + Schema

            {
                "message": "no message",
                "data": {
                    "id": 1104914,
                    "firstname": "Ричард1",
                    "surname": "Фейнман",
                    "patronymic": "Филлипс",
                    "phone": "380990000001",
                    "phone_verified": 1,
                    "email": "physics@example.com",
                    "isbackup": 1,
                    "backup_date": "1130304721",
                    "backup_link": "test",
                    "user_photo": "http://example.com/base/storage/uploads/images/client_photo/zcBOIwRQ5LebGxYhobzW7Wf4hMRRFdSQFs0cWzek.png",
                    
                    "codes_not_viewed": 0,
                    "gift": false,
                    "available_gifts": 0,
                    "not_read_notifications_count": 1,
                    "card": "000000112065"
                },
                "errors": []
            }

### Выход [GET/ (use: base/api/auth/logout)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/auth/logout
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }


# Five Element API [/api/five_element/]
<hr/>

### Получение справочников по разделу заявок [GET/ (use: base/api/five_element/requests/info)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/info
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

    + Schema

            {
                "message": "no message",
                "data": {
                    "requests_count": 1,
                    "services": [
                        {
                            "id": 467,
                            "code": "100541973730",
                            "name": "Программа Защита+1TV от 420,1 до 450,0",
                            "product_model": "H32D4002 Телевизор LED TCL",
                            "product_name": "Телевизоры ЖК",
                            "product_brand": "TCL",
                            "sale_place": "Мозырь Дружбы 11А, МиксРитэйл ООО",
                            "shopping_time": "29 ноября 2018",
                            "expired": "9 октября 2019"
                        }
                    ],
                    "technic_categories": [
                        "Телевизоры и видео",
                        "Телевизоры и аксессуары",
                        "Телевизоры по диагонали",
                        "Видеотехника",
                        "DVD и Blu-ray плееры",
                        "Видеопроекторы",
                        "Домашние кинотеатры",
                        "Звуковые панели и саундбары",
                        "Кабели и переходники",
                        "Микрофоны",
                        "Пульты ДУ",
                        "ТВ антенны",
                        "Чистящие средства для электроники"
                    ],
                    "technic_install_categories": [
                        "Чистящие средства для электроники",
                        "Экраны для проекторов",
                        "3D видео",
                        "3D очки",
                        "Blu-ray плееры 3D",
                        "Домашние кинотеатры 3D",
                        "Звуковые панели с 3D",
                        "3D телевизоры",
                        "4K (Ultra HD) видео",
                        "4K (Ultra HD) телевизоры",
                        "Домашние кинотеатры 4K",
                        "Аудиотехника",
                        "Ноутбуки и компьютеры",
                        "Телефоны и планшеты",
                        "Фото и видеокамеры",
                        "Игровая зона",
                        "Спорт",
                        "Техника для кухни",
                        "Техника для дома",
                        "Дома, дача, ремонт",
                        "Автотовары"
                    ],
                    "request_reason": [
                        "Неисправность в работе",
                        "Первичная настройка",
                        "Настройка IT сервисов/интернета",
                        "Механическое повреждение",
                        "Консультация",
                        "ТО",
                        "Другое"
                    ]
                },
                "errors": []
            }


### Получение списка заявок [GET/ (use: base/api/five_element/requests/get)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/get
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            /*Доступны два типа: "prs_request" и "technic_status";*/

    + Schema

            {
                "message": "no message",
                "data": [
                    {
                        "id": 1,
                        "product_category": null,
                        "product_brand": null,
                        "product_model": null,
                        "created_at": "26.11.18 06:30",
                        "created_at_sorting": "2018-11-26 18:30:37",
                        "act_number": "00000545454",
                        "act_time": "26.11.18 06:30",
                        "technic": "TM-5581 цвет золотой Телефон GSM TEXET",
                        "status": "Осталось совсем чуть-чуть до отправки в Сервисный Центр",
                        "status_short": "На обновлении",
                        "type": "technic_status"
                    },
                    {
                        "id": 89,
                        "status": "В работе",
                        "status_short": "В работе",
                        "contact_fio": "",
                        "contact_phone": "",
                        "product_model": "H32D4002 Телевизор LED TCL",
                        "product_name": null,
                        "product_brand": "TCL",
                        "sale_place": "Мозырь Дружбы 11А, МиксРитэйл ООО",
                        "created_at": "12.11.18 05:50",
                        "created_at_sorting": "2018-11-12 17:50:44",
                        "request_reason": "",
                        "type": "prs_request",
                        "code": "100541973730",
                        "name": "Программа Защита+1TV от 420,1 до 450,0",
                        "product_category": "Телевизоры ЖК",
                        "shopping_time": "30 ноября 2018",
                        "expired": "9 октября 2019"
                    }
                ],
                "errors": []
            }


### Добавить ПРС заявку [POST/{contact_fio}/{contact_phone}/{service_id}/{technic_category}/{request_reason}/{request_comment}/ (use: base/api/five_element/requests/add_prs)]

+ Parameters
    + contact_fio (required, (string)) ... *ФИО контактного лица от 2 до 100 символов*
    + contact_phone (required, (integer)) ... *12 симовлов телефона*
    + service_id (optional, (integer)) ... *id сервиса клиента (из списка - получение информационных данных по разделу заявок [GET/ (use: requests/info)])*
    + technic_category (required, (string)) ... *(из списка - получение информационных данных по разделу заявок [GET/ (use: requests/info)])*
    + request_reason (required, (integer)) ... *(из списка - получение информационных данных по разделу заявок [GET/ (use: requests/info)])*
    + request_comment (required, (string)) ... *комментарий клиента по заявке (до 500 символов)*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/add_prs
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }


            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "contact_fio",
                        "data": "Поле contact fio обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "contact_phone",
                        "data": "Поле contact phone обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "technic_category",
                        "data": "Поле technic category обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "request_reason",
                        "data": "Поле request reason обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "request_comment",
                        "data": "Поле request comment обязательно"
                    }
                ]
            }


### Восстановить ПРС заявку [POST/{request_id}/{request_comment}/ (use: base/api/five_element/requests/restore_prs)]

+ Parameters
    + request_id (required, (integer)) ... *id заявки, которую нужно восстановить*
    + request_comment (required, (string)) ... *комментарий клиента по причине восстановления (до 500 символов)*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/restore_prs
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "request_id",
                        "data": "Поле request id обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "request_comment",
                        "data": "Поле request comment обязательно"
                    }
                ]
            }


### Добавление заявки по установке техники [POST/{contact_fio}/{contact_phone}/{technic_category}/{address}/{install_date}/ (use: base/api/five_element/requests/add_install)]

+ Parameters
    + contact_fio (required, (string)) ... *ФИО контактного лица от 2 до 100 символов*
    + contact_phone (required, (integer)) ... *12 симовлов телефона*
    + technic_category (required, (string)) ... *(из списка - получение информационных данных по разделу заявок [GET/ (use: requests/info)])*
    + address (required, (integer)) ... *адрес клиента (от 3 до 200 символов)*
    + install_date (required, (string)) ... *дата установки в формате http://php.net/manual/ru/datetime.formats.date.php например 2018-10-22 14:51:20*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/add_install
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "technic_category",
                        "data": "Поле technic category обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "contact_fio",
                        "data": "Поле contact fio обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "contact_phone",
                        "data": "Поле contact phone обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "address",
                        "data": "Поле address обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "install_date",
                        "data": "Поле install date обязательно"
                    }
                ]
            }


### Добавление задачи на установку мастеру [POST/{request_number}/{contact_phone}/{technic_category}/{technic_model}/{contact_fio}/{contact_phone}/{install_date}/ (use: base/api/five_element/requests/add_master_install)]

+ Parameters

    + request_number (required, (string)) ... *Уникальный номер услуги*
    + technic_category (required, (string)) ... *(из списка - получение информационных данных по разделу заявок [GET/ (use: requests/info)])*
    + technic_model (required, (string)) ... *модель товара - любые символы (от 2 до 100)*
    + contact_fio (required, (string)) ... *ФИО контактного лица от 2 до 100 символов*
    + contact_phone (required, (integer)) ... *12 симовлов телефона*
    + install_date (required, (string)) ... *дата установки в формате http://php.net/manual/ru/datetime.formats.date.php например 2018-10-22 14:51:20*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/requests/add_master_install
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body

            Если в ответе сервера errors не пустое нужно остаться на экране введения данных установки и отобразить текст ошибки.
            Если ответ сервера не содержит ошибок нужно отобразить текст из параметра "message" или поле "message" в параметрe "data" ==>> "data": {"message": "some text"})

    + Schema

            {
                "message": "Услуга «Установка» принята в работу. Ожидайте, пожалуйста, звонок от Мастера.",
                "data": {
                    "message": "Услуга «Установка» принята в работу. Ожидайте, пожалуйста, звонок от Мастера."
                },
                "errors": []
            }

            {
                "message": "Услуга «Установка» уже в работе. Ожидайте, пожалуйста, звонок от Мастера .",
                "data": {
                    "message": "Услуга «Установка» уже в работе. Ожидайте, пожалуйста, звонок от Мастера ."
                },
                "errors": []
            }

            {
                "message": "Услуга «Установка»  с таким уникальным номером не найдена. Приобрести данную услугу можно в ближайшем магазине 5Элемент.",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "Услуга «Установка»  с таким уникальным номером не найдена. Приобрести данную услугу можно в ближайшем магазине 5Элемент.",
                        "data": "Услуга «Установка»  с таким уникальным номером не найдена. Приобрести данную услугу можно в ближайшем магазине 5Элемент."
                    }
                ]
            }

            {
                "message": "Поле request number должно содержать от 2 до 20 цифр, Поле телефон должно содержать от 12 до 12 цифр",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "request_number",
                        "data": "Поле request number должно содержать от 2 до 20 цифр"
                    },
                    {
                        "code": 1001,
                        "message": "contact_phone",
                        "data": "Поле телефон должно содержать от 12 до 12 цифр"
                    }
                ]
            }


### Добавление отзыва клиента [POST/{description}/{email}/{type} (use: base/api/five_element/add_review)]

+ Parameters
    + description (required, (string)) ... *Текст отзыва*
    + email (required, (integer)) ... *email клиента*
    + type (max:100(string)) ... *Тип отзыва*

+ Response 200 (application/json) 
    + Headers
    
            Location: base/api/five_element/add_review
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body
    
            /* 
                доступны 3 типа отзывов:
                'sentence' => 'Предложение',
                'thanks' => 'Благодарность',
                'comment' => 'Замечание'
            */

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "description",
                        "data": "Поле description обязательно"
                    },
                    {
                        "code": 1001,
                        "message": "email",
                        "data": "Поле email обязательно"
                    }
                    {
                        "code": 1001,
                        "message": "type",
                        "data": "В поле type не может быть больше 100 символов"
                    }
                ]
            }


### Получение списка сервисов (услуг) [GET/ (use: base/api/five_element/services/get)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/services/get
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            /*
                Доступны три типа type: "prs", "martlet", "insurance":
                Защита+/ПРС (prs)
                contract_link: ссылка на PDF файлы - могут быть разные PDF (contract_type=zaschita) или на сайт (contract_type=prs)
                contract_type: тип договора - zaschita или prs
                
                Мартлет (martlet)
                 - app_link: может содержать ссылку на Play Market, страницу описания продукта или AppStore (маловероятно).
                   Вообщем, лучше пересылать клик по данной ссылке на браузер.
                   Может быть пустой.
                   
                Страховка (insurance)
                 - contract_link: ссылка на PDF файлы - могут быть разные PDF (contract_type=insurance)
                 - contract_type=insurance
            */

    + Schema

            {
                "message": "no message",
                "data": [
                    {
                        "id": 17,
                        "name": "vasya",
                        "surname": "pupkin",
                        "last_name": "grigorovich",
                        "imei": "4156412",
                        "brand": "ELECTROLUX",
                        "model": "ZSPC2010 Пылесос ELECTROLUX",
                        "device_price": "448.00",
                        "insurance_amount": "452.48",
                        "expired_at": "23.09.2020",
                        "used": 0,
                        "approved": null,
                        "denied": 0,
                        "created_at_sorting": "2019-09-24 14:58:15",
                        "activated_time": "25.09.2019",
                        "phone": "375999999715",
                        "reported": 0,
                        "type": "insurance",
                        "contract_link": "https://sotest.so24.net/base/storage/five_element/insurance.pdf",
                        "contract_type": "insurance"
                    },
                    {
                        "id": 2,
                        "licence": "32GAZ-F5S4R-RN1NW-86124",
                        "name": "Kaspersky Safe Kids",
                        "about": "это помощь в воспитании современного ребенка.\nОсобенности:Здоровое общение.Узнайте, если у ребенка проблемы с друзьями. Присматривайте за его публикациями на Facebook\nПравильное развитие.Научите детей не проводить все время у экрана. Лимитируйте время использования интернета и устройств\nПоиск детей.Задайте периметр, где ему следует быть в определенный период времени, и получите уведомление, если ребенок покинул его\nВзаимопонимание.Узнавайте об интересах вашего ребенка по тому, какую информацию он ищет в интернете. Так вы сможете лучше понимать его и помочь избежать неприятностей",
                        "created_at_sorting": "2018-11-30 15:29:17",
                        "app_link": "https://play.google.com/store/apps/details?id=com.eset.ems2.gp&hl=ru",
                        "type": "martlet"
                    },
                    {
                        "id": 467,
                        "code": "100541973730",
                        "name": "Программа Защита+1TV от 420,1 до 450,0",
                        "product_model": "H32D4002 Телевизор LED TCL",
                        "product_name": "Телевизоры ЖК",
                        "product_brand": "TCL",
                        "sale_place": "Мозырь Дружбы 11А, МиксРитэйл ООО",
                        "shopping_time": "30 ноября 2018",
                        "expired": "9 октября 2019",
                        "created_at_sorting": "2017-10-17 17:03:11",
                        "type": "prs",
                        "contract_link": "http://so24php7.local/base/storage/oferta-zaschita.pdf",
                        "contract_type": "zaschita"
                    },
                    {
                        "id": 467,
                        "code": "100541973730",
                        "name": "Программа Защита+1TV от 420,1 до 450,0",
                        "product_model": "H32D4002 Телевизор LED TCL",
                        "product_name": "Телевизоры ЖК",
                        "product_brand": "TCL",
                        "sale_place": "Мозырь Дружбы 11А, МиксРитэйл ООО",
                        "shopping_time": "30 ноября 2018",
                        "expired": "9 октября 2019",
                        "created_at_sorting": "2017-10-17 17:03:11",
                        "type": "prs",
                        "contract_link": "https://5element.by/services/997-programma-zaschita",
                        "contract_type": "prs"
                    }
                ],
                "errors": []
            }

### Удаление ПРС/Защита+ из аккаунта клиента [GET/ (use: base/api/five_element/services/prs/remove/{id})]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/services/prs/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            Деактивирует ПРС/Защита+. Из БД он не удаляется. Может быть потом привязан к другому аккаунту.

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Нечего менять",
                "data": null,
                "errors": [
                    {
                        "code": 1007,
                        "message": "Нечего менять",
                        "data": "Нечего менять"
                    }
                ]
            }



### Удаление Мартлет кодов [GET/ (use: base/api/five_element/services/martlet/remove/{id})]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/services/martlet/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            Удаление Мартлет кодов из аккаунта клиента (soft delete)

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Нечего менять",
                "data": null,
                "errors": [
                    {
                        "code": 1007,
                        "message": "Нечего менять",
                        "data": "Нечего менять"
                    }
                ]
            }
            
        
        
### Поиск модели/бренда [POST/{brand}/{model}/{field}/ (use: base/api/five_element/search_products)]

+ Parameters
    + brand (required, (string)) ... *имя бренда*
    + model (optional, (string)) ... *обязательно если в поле field указано model*
    + field (required, (string)) ... *может иметь значения brand или model*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/search_products
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body

            Поиск модели или бренда по товарам 5элемент. Посик по полю model производится с учетом поля brand.

    + Schema

            {
                "message": "no message",
                "data": [
                    "ASUS",
                    "OYSTERS",
                    "PANASONIC",
                    "PHILIPS",
                    "PRESTIGIO",
                    "SAMSUNG",
                    "SONY"
                ],
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "brand",
                        "data": "Поле brand обязательно"
                    }
                ]
            }   
            
            
            
### Активация страховки [POST/{prs_id}/{imei}/{name}/{last_name}/{surname}/{notification_id} (use: base/api/five_element/services/insurances/activate)]

+ Parameters
    + prs_id (required, (int)) ... *id услуги*
    + imei (required, (string)) ... *imei устройства*
    + name (required, (string)) ... *имя пользователя*
    + last_name (required, (string)) ... *отчество пользователя*
    + surname (required, (string)) ... *фамилия пользователя*
    + notification_id (required, (int)) ... *id уведомления*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/services/insurances/activate
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1001 'Поле \"#название поля#\" обезательно',
                1102 '"Страхование\" уже активировано',
                1105 'Защита+ была активирована другим пользователем',
                1106 'Защита+ не найдена',
                1107 'Время активации \"Страхования\" (14 дней) истекло',
          
      

    + Schema

            {
                "message": "Успешно активировано",
                "data": null,
                "errors": []
            }   
            


### Скрытие страховки [GET/(use: base/api/five_element/services/insurances/hide/{id})]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/five_element/services/martlet/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            Скрытие страховки из аккаунта клиента

    + Schema

            {
                "message": "success",
                "data": null,
                "errors": []
            }

            {
                "message": "Запись с предоставленным ID не найдена.",
                "data": null,
                "errors": [
                    {
                        "code": 1051,
                        "message": "Запись с предоставленным ID не найдена.",
                        "data": "Запись с предоставленным ID не найдена."
                    }
                ]
            }
            



# Park Technic API [/api/park_technic/]
<hr/>

### Справочник создания техники [GET/ (use: base/api/park_technic/info)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/park_technic/info
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body


    + Schema

            {
                "message": "no message",
                "data": {
                    "technic_categories": [
                        {
                            "id": 1,
                            "name": "test",
                            "parent_id": null,
                            "image": "five_element/park_technic_images/ae5eced827ae999b92e37962e8e3f855.jpg",
                            "image_big": "five_element/park_technic_images/72d149a541272b2eca054b05eee756ee.jpg",
                            "image_black": "five_element/park_technic_images/c30b69b2cbd348d7cbf5fae01053667b.jpg",
                            "childrens": [
                                {
                                    "id": 2,
                                    "name": "sub test",
                                    "parent_id": 1,
                                    "image": "five_element/park_technic_images/cb084658dde21574c132821670b70f8b.jpg",
                                    "image_big": "five_element/park_technic_images/4a838e81b6d831da74485dce4ff0abef.jpg",
                                    "image_black": "five_element/park_technic_images/48dfb6db85b3c3da75cf73744280d5cf.jpg",
                                    "brands": [
                                        "Apple",
                                        "LG",
                                        "Samsung"
                                    ]
                                }
                            ],
                            "brands": [
                                "Apple",
                                "LG",
                                "Samsung"
                            ]
                        },
                        {
                            "id": 3,
                            "name": "test2",
                            "parent_id": null,
                            "image": "five_element/park_technic_images/2e9b0953db6af7a46898345873ab198c.jpg",
                            "image_big": "five_element/park_technic_images/663f9632096b28da71a41d816c282e37.jpg",
                            "image_black": "five_element/park_technic_images/91c5158cac6cc74f09b86743e6668bd2.jpg",
                            "childrens": [
                                {
                                    "id": 4,
                                    "name": "sub test2",
                                    "parent_id": 3,
                                    "image": "five_element/park_technic_images/2b1712fc4798b205b915e79be0c6dec5.jpg",
                                    "image_big": "five_element/park_technic_images/e4a612d88b62dc217f062f194dcd5505.jpg",
                                    "image_black": "five_element/park_technic_images/132637b1a8506433b3a5f0da54ddfedf.jpg",
                                    "brands": [
                                        "Apple"
                                    ]
                                }
                            ],
                            "brands": [
                                "Samsung"
                            ]
                        }
                    ],
                    "exploitation_time": [
                        "1-3 года",
                        "3-6 года",
                        "Более 6 лет"
                    ],
                    "brands": [
                        "ALCATEL",
                        "APPLE",
                        "ASUS",
                        "DAEWOO"
                    ]
                },
                "errors": []
            }
            

### Добавление товара в парк [POST/{technic_category_id}/{brand}/{model}/{exploitation_time}/{repaired}/ (use: base/api/park_technic/add)]

+ Parameters
    + technic_category_id (required, (integer)) ... *ID катеогрии полученного в справочнике*
    + brand (required, (string)) ... *обязательно - название бренда (получено по запросу base/api/five_element/search_products)*
    + model (required, (string)) ... *обязательно - название модели (получено по запросу base/api/five_element/search_products)*
    + exploitation_time (required, (string)) ... *срок эксплуатации, варианты в справочнике*
    + repaired (required, (integer)) ... *был товар в ремонте или нет: 0 - нет, 1 - да*


+ Response 200 (application/json)
    + Headers
    
            Location: base/api/park_technic/add
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body


    + Schema

            {
                "message": "Success",
                "data": null,
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "technic_category_id",
                        "data": "Выбранное значение из категория техники не действительно"
                    },
                    {
                        "code": 1001,
                        "message": "brand",
                        "data": "Поле brand обязательно"
                    }
                ]
            }


### Редактирование товара в парке [POST/{id}/{technic_category_id}/{brand}/{model}/{exploitation_time}/{repaired}/ (use: base/api/park_technic/edit)]

+ Parameters
    + id (required, (integer)) ... *ID товара из парка техники. Товар должен принадлежать пользователю и не быть привязан к ПРС (prs_service - null)*
    + technic_category_id (required, (integer)) ... *ID катеогрии полученного в справочнике*
    + brand (required, (string)) ... *обязательно - название бренда (получено по запросу base/api/five_element/search_products)*
    + model (required, (string)) ... *обязательно - название модели (получено по запросу base/api/five_element/search_products)*
    + exploitation_time (required, (string)) ... *срок эксплуатации, варианты в справочнике*
    + repaired (required, (integer)) ... *был товар в ремонте или нет: 0 - нет, 1 - да*


+ Response 200 (application/json)
    + Headers
    
            Location: base/api/park_technic/edit
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body


    + Schema

            {
                "message": "Success",
                "data": null,
                "errors": []
            }

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "technic_category_id",
                        "data": "Выбранное значение из категория техники не действительно"
                    },
                    {
                        "code": 1001,
                        "message": "brand",
                        "data": "Поле brand обязательно"
                    }
                ]
            }


### Список товаров из парка техники [GET/ (use: base/api/park_technic/get)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/park_technic/get
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body

            prs_service иожет быть null или содержать обьект купленного клиентом сервиса ПРС. technic_category должен присутствовать всегда.
            Картинки могут быть null. 
            repaired (товар был в ремонте) может иметь значения null - не известно, 0 - нет, 1 - да.
            install_available - товар может быть устновлен мастером может иметь значения 0 - нет, 1 - да.

    + Schema

            {
                "message": "no message",
                "data": [
                    {
                        "id": 1,
                        "brand": "SAMSUNG",
                        "model": "tv wi-fi gprs hdtv 555",
                        "technic_category_id": 2,
                        "exploitation_time": "3-6 года",
                        "repaired": 1,
                        "prs_service": null,
                        "technic_category": {
                            "id": 2,
                            "name": "sub test",
                            "parent_id": 1,
                            "image": "five_element/park_technic_images/cb084658dde21574c132821670b70f8b.jpg",
                            "image_big": "five_element/park_technic_images/4a838e81b6d831da74485dce4ff0abef.jpg",
                            "image_black": "five_element/park_technic_images/48dfb6db85b3c3da75cf73744280d5cf.jpg",
                            "active": 1,
                            "install_available": 0
                        }
                    },
                    {
                        "id": 26,
                        "brand": "test",
                        "model": "ux1000",
                        "technic_category_id": 8,
                        "exploitation_time": "1-3 года",
                        "repaired": 0,
                        "prs_service": {
                            "id": 75238,
                            "name": "Услуга Профилактика кондиционера от 2 400,1 до 2 600,0 (Тест)",
                            "category": "Кондиционер",
                            "model": "ux1000",
                            "brand": "test",
                            "expired": "04.10.2020"
                        },
                        "technic_category": {
                            "id": 8,
                            "name": "Кондиционер",
                            "parent_id": 5,
                            "image": "five_element/park_technic_images/cb084658dde21574c132821670b70f8b.jpg",
                            "image_big": "five_element/park_technic_images/4a838e81b6d831da74485dce4ff0abef.jpg",
                            "image_black": "five_element/park_technic_images/48dfb6db85b3c3da75cf73744280d5cf.jpg",
                            "active": 0,
                            "install_available": 1
                        }
                    }
                ],
                "errors": []
            }


### Удалить товар из парка [GET/ (use: base/api/park_technic/remove/{id})]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/park_technic/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            {id} - вместо плесхолдера вставлять id товара
            
    + Schema

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "id",
                        "data": "Выбранное значение из id не действительно"
                    }
                ]
            }

            {
                "message": "Успешно удалено",
                "data": null,
                "errors": []
            }



# Notifications API [/api/notifications/]
<hr/>

### Получение списка уведомлений [GET/ (use: base/api/notifications/get)]

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/notifications/get
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    

    + Schema

            {
                "message": "no message",
                "data": {
                    "notifications": [],
                    "count": 0
                },
                "errors": []
            }

            {
                "message": "no message",
                "data": {
                    "notifications": [
                        {
                            "id": 56987,
                            "title": "Страховка: Заголовок уведомления",
                            "description": "Ваша версия хрень, установите новую.",
                            "read": 1,
                            "publish_date": "2019-09-21 09:57:46",
                            "type": "insurance",
                            "publish_date_unix": 1569049066,
                            "image_default": "https://sotest.so24.net/base/storage/five_element/notification_pictogram/3a34989ef0aa795bdb5df1dfb7f1bf01.png",
                            "image_active": "https://sotest.so24.net/base/storage/five_element/notification_pictogram/7d468de9feb551258606c8c79082ee4f.png"
                        },
                        {
                            "id": 48762,
                            "title": "dwad",
                            "description": "adwa",
                            "read": 1,
                            "type": "",
                            "publish_date": "2019-01-25 01:00:00",
                            "publish_date_unix": 1548370800,
                            "image_default": "",
                            "image_active": ""
                        },
                        {
                            "id": 48758,
                            "title": "Test, благодарим за регистрацию.\r\n",
                            "description": "\r\nТеперь Вы можете использовать все возможности сервиса удаленной технической поддержки.",
                            "read": 1,
                            "type": "21esdw",
                            "publish_date": "2018-10-19 10:50:05",
                            "publish_date_unix": 1539935405,
                            "image_default": "http://sotest/base/storage/five_element/notification_pictogram/b4f0d2b9f77503f59a0b9241a9c01363.png",
                            "image_active": "http://sotest/base/storage/five_element/notification_pictogram/5c36f39f8ad877c1cf840c5859afa535.png"
                        }
                    ],
                    "count": 2
                },
                "errors": []
            }


### Удаление уведомления [POST/{id}/ (use: base/api/notifications/remove/{id})]

+ Parameters
    + id (required) ... *Id уведомления*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/notifications/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1007 'Nothing to change',

    + Schema

            {
                "message": "Нечего менять",
                "data": null,
                "errors": [
                    {
                        "code": 1007,
                        "message": "Нечего менять",
                        "data": "Нечего менять"
                    }
                ]
            }


            {
                "message": "Успешно удалено",
                "data": null,
                "errors": []
            }


### Чтение уведомления [POST/{id}/ (use: base/api/notifications/read/{id})]

+ Parameters
    + id (required) ... *Id уведомления*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/notifications/read/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1051 'Nothing to change',

    + Schema

            {
                "message": "Запись с предоставленным ID не найдена.",
                "data": null,
                "errors": [
                    {
                        "code": 1051,
                        "message": "Запись с предоставленным ID не найдена.",
                        "data": "Запись с предоставленным ID не найдена."
                    }
               
            }

            {
                "message": "Success",
                "data": [
                    {
                        "id": 48758,
                        "title": "Test, благодарим за регистрацию.\r\n",
                        "description": "\r\nТеперь Вы можете использовать все возможности сервиса удаленной технической поддержки.",
                        "type": "21esdw",
                        "read": 1,
                        "publish_date": "2018-10-19 10:50:05",
                        "publish_date_unix": 1539935405,
                        "image_default": "http://sotest/base/storage/five_element/notification_pictogram/b4f0d2b9f77503f59a0b9241a9c01363.png",
                        "image_active": "http://sotest/base/storage/five_element/notification_pictogram/5c36f39f8ad877c1cf840c5859afa535.png"
                    }
                ],
                "errors": []
            }
            
            {
                "message": "Success",
                "data": [
                    {
                        "id": 56996,
                        "title": "Страховка: Заголовок уведомления",
                        "description": "Ваша версия хрень, установите новую.",
                        "read": 1,
                        "extra_data": {
                            "insurance": {
                                "prs_id": 881781,
                                "description": "Страховка: Текст уведомления",
                                "name": "Василий",
                                "surname": "Зеленцов",
                                "patronymic": "Фуцы",
                                "brand": "ELECTROLUX",
                                "model": "ZSPC2010 Пылесос ELECTROLUX",
                                "price": 448,
                                "shopping_time": 1568764800
                            }
                        },
                        "publish_date": "2019-09-24 14:56:21",
                        "type": "insurance",
                        "publish_date_unix": 1569326181,
                        "updated_at": "2019-09-24 14:56:31",
                        "image_default": "https://sotest.so24.net/base/storage/five_element/notification_pictogram/3a34989ef0aa795bdb5df1dfb7f1bf01.png",
                        "image_active": "https://sotest.so24.net/base/storage/five_element/notification_pictogram/7d468de9feb551258606c8c79082ee4f.png"
                    }
                ],
                "errors": []
            }


# Technic API [/api/technic_status/]
<hr/>

### Получение списка техники в ремонте [GET/ (use: base/api/technic_status/list{?page}{?count})]

+ Parameters
    + page (optional) ... *номера страниц - начинаются с 1*
    + count (optional) ... *количество элементов на странице - по умолчанию 25*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/technic_status/list
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    

    + Schema

            {
                "message": "no message",
                "data": {
                    "display": 0,
                    "total": 0,
                    "current_page": 1,
                    "last_page": 1,
                    "statuses": []
                },
                "errors": []
            }

            {
                "message": "no message",
                "data": {
                    "display": 2,
                    "total": 2,
                    "current_page": 1,
                    "last_page": 1,
                    "statuses": [
                        {
                            "technic": "Планшеты ASUS",
                            "diagnostic_result": "12.07 в работе, готов, на тесте",
                            "status": "Выдача покупателю"
                        },
                        {
                            "technic": "Смартфоны XIAOMI",
                            "diagnostic_result": "",
                            "status": ""
                        }
                    ]
                },
                "errors": []
            }


### Добавление техники в ремонте [POST/{code}/ (use: base/api/technic_status/add)]

+ Parameters
    + code (required) ... *номер акта или ПРС*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/technic_status/add
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1001 'Validation error',
                1019 'Нет такого кода в базе. Данные обновляются несколько раз в сутки. Возможно, вам следует попробовать немного позже.',

    + Schema

            {
                "message": "Нет такого кода в базе. Данные обновляются несколько раз в сутки. Возможно, вам следует попробовать немного позже.",
                "data": null,
                "errors": [
                    {
                        "code": 1019,
                        "message": "Нет такого кода в базе. Данные обновляются несколько раз в сутки. Возможно, вам следует попробовать немного позже.",
                        "data": "Нет такого кода в базе. Данные обновляются несколько раз в сутки. Возможно, вам следует попробовать немного позже."
                    }
                ]
            }


            {
                "message": "Актов по данному коду: 1. Информация по ним добавлена в список.",
                "data": {
                    "display": 2,
                    "total": 2,
                    "current_page": 1,
                    "last_page": 1,
                    "statuses": [
                        {
                            "technic": "Планшеты ASUS",
                            "diagnostic_result": "12.07 в работе, готов, на тесте",
                            "status": "Выдача покупателю"
                        },
                        {
                            "technic": "Смартфоны XIAOMI",
                            "diagnostic_result": "",
                            "status": ""
                        }
                    ]
                },
                "errors": []
            }







# HTTP REST API [/api/]
<hr/>

### Базовая информация [PUT]

+ Response 200

    + Body
    
            Версия: "1.2"
            
            Все передаваемые данные должны быть в кодировке "UTF-8"
            
            Все номера телефонов должны быть представлены в виде строк чисел в международном формате: 
            "<3><код страны><код оператора><номер>"
            
            Пример: "380501111111"
            
            SCHEME: "http"
            API_URL: "SCHEME://example.net/api"
            
            Плотность экрана параметр (density):
                
                @1x (не Retina)
                    0 - mdpi (1x)    320x163
                    1 - hpdi (1x)    540x277
                    2 - xhdpi (1x)   720x367
                    3 - xxhdpi (1x)  1080x551
                    4 - xxxhdpi (1x) 1600x817
                
                @2x (Retina, iPhone 4/5/6)
                    5 - mdpi (2x)    640x326
                    6 - hpdi (2x)    1080x554
                    7 - xhdpi (2x)   1440x734
                    8 - xxhdpi (2x)  2116x1079
                    9 - xxxhdpi (2x) 3200x1634
                
                @3x (iPhone 6 plus)
                    10 - mdpi (3x)    800x408
                    11 - hpdi (3x)    1350x693
                    12 - xhdpi (3x)   1800x918
                    13 - xxhdpi (3x)  2700x1376
                    14 - xxxhdpi (3x) 4000x2043

### Регистрация (android и iOS) [POST/{user_photo}/{name}/{surname}/{phone}/{phone_model}/{password}/{password_confirm}/{app_name}/{partner_name}/ (use: api/register)]

+ Parameters
    + user_photo (required) ... *фото пользователя в формате **Base64***
    + name (required) ... *имя*
    + surname (required) ... *фамилия*
    + phone (required) ... *телефон*
    + phone_model (required) ... *модель телефона*
    + password (required) ... *пароль*
    + password_confirm (required) ... *подтверждение пароля*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/register?user_photo=Base64&name=wezom&surname=mobile&phone=38050XXXXXXX@phone_model=LenovoA760
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }


### Заказ обратного звонка [POST/{username}/{phone}/{comment}/{time_from}/{time_to}/{product_category}/ (use: base/api/get_callback)]

+ Parameters
    + username (required, (string)) ... *контактное имя*
    + phone (required, (string)) ... *контактный телефон*
    + comment (required, (integer)) ... *комментарий клиента*
    + time_from (required, (string)) ... *время начала промежутка для звонка в формате час:минута (13:24).*
    + time_to (required, (string)) ... *время конца промежутка для звонка в формате час:минута (13:12).*
    + product_category (required, (string)) ... *Категория товара*
    
+ Response 200 (application/json)
    + Headers
    
            Location: base/api/get_callback
            Method: POST

    + Body
    
            Возможные ошибки:
                0 'Не верно указано время звонка',

    + Schema

            {
                "success": true,
                "errors":[]
            }
            {
                "success": false,
                "errors": [
                    {
                        "code": 0,
                        "message": "bad_data",
                        "data": "Не верно указано время звонка"
                    }
                ]
            }

### Регистрация через соц.сеть (android) [POST/{user_photo}/{username}/{social_type}/{social_id}/{app_name}/{partner_name} (use: api/registerSocial)]

+ Parameters
    + user_photo (required) ... *ссылка на фото пользователя*
    + username (required) ... *имя+фамилия (так как соц. сети выдают эту информацию вместе одной строкой)*
    + social_type (required) ... *индикатор соц.сети*
    + social_id (required, (int)) ... *id пользователя в соц.сети*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/registerSocial?user_photo=http://vk.com/images/pk.jpg&username=wezom.mobile&social_type=1@social_id=1565485652
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Индикатор "social_type":
                0 - "google+",
                1 - "facebook",
                2 - "vk",
                3 - "ok"
                
    + Schema
    
            {
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения регистрации (iOS) [GET/{email}/{code}/ (use: api/checkcode)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    + code (required) ... *код полученный из почтового ящика*
    
+ Response 200 (application/json)

    + Headers

            Location: checkcode?email=tttt@tt.tt&code=XXXXX
            Method: GET

    + Body

            "uid" - уникальный идентификатор пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema
    
            {
                "uid": 1125,
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения регистрации (Android) [GET/{phone}/{code}/ (use: api/checkcode)]

+ Parameters
    + phone (required) ... *телефон*
    + code (required) ... *код полученныйиз СМС*
    
+ Response 200 (application/json)

    + Headers

            Location: api/checkcode?phone=38050XXXXXXX&code=XXXXX
            Method: GET

    + Body

            "uid" - уникальный идентификатор пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "uid": 1125,
                "success": true,
                "errors": (array)
            }

### Авторизация (Android и iOS) [POST/{phone}/{passwd}/{app_name}/{partner_name}/{fcm_token} (use: api/login)]

+ Parameters
    + phone (required, (int), `3805012312312`) ... *телефон*
    + passwd (required) ... *пароль*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    + fcm_token (required, (string)) ... *токен для уведомлений*

+ Response 200 (text/html)

    + Headers

            Location: api/login?phone=38050XXXXXXX&passwd=XXXXX
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "uid" - id пользователя
            "name" - имя
            "username" - фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "backup_link" - ссылка на backup
            "gift" - доступ к подаркам
            "codes_not_viewed" - коды, которые еще не просмотрены

    + Schema
    
            {
                "success": true,
                "errors": [],
                "uid": "1090122",
                "name": "Илья",
                "username": "Дегтяренко",
                "telephone": "380505765684",
                "user_photo": "http://example.net/assets/images/users/1090122_9848.png",
                "backup_link": "HtTp://uRl.CoM",
                "codes_not_viewed": 0,
                "gift": false
            }

### Авторизация через соц.сеть (Android) [POST/{social_type}/{social_id}/{app_name}/{partner_name} (use: api/loginSocial)]

+ Parameters
    + social_type (required, (int)) ... *индификатор соц.сети*
    + social_id (required, (int)) ... *id пользователя в соц.сети*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/loginSocial?social_type=1&social_id=123132135456
            Method: POST

    + Body
    
            "name" - имя
            "username" -фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "success" - результат операции(true/false)
            "errors" - массив содержащий сообщения об ошибках
            "gift" - доступ к подаркам

    + Schema

            {
                "name": "Петро",
                "username": ”Петров",
                "telephone": 380953636369,
                "user_photo": "SCHEME://API_URL/123456.png",
                "success": true,
                "errors": "array",
                "gift": false
            }

### Восстановление пароля (iOS) [POST/{email}/ (use: api/sendpasswd)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?email=tttt@tt.tt&passwd
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": "array"
            }

### Проверка кода для завершения восстановления пароля (iOS) [POST/{email}/{code}/ (use: api/sendpasswd)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    + code (required) ... *код полученный из почтового ящика*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?email=tttt@tt.tt&code=XXXXX
            Method: POST

    + Body
            
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": "array"
            }

### Восстановление пароля (Android) [POST/{phone}/ (use: api/sendpasswd)]

+ Parameters
    + phone (required) ... *телефон*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?phone=38050XXXXXXX
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения восстановления пароля (Android) [GET/{phone}/{code}/ (use: api/sendpasswd)]

+ Parameters
    + phone (required) ... *телефон*
    + code (required) ... *код полученныйиз СМС*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?phone=8050XXXXXXX&code=XXXXX
            Method: GET

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }
            
### Изменение данных пользователя [POST/{uid}/{image_person}/{name}/{phone}/{surname}/{surname}/{passw}/{passwdcheck}/ (use: api/changedata)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + image_person (required) ... *фото пользователя в формате Base64*
    + name (required) ... *имя*
    + phone (required) ... *телефон  уже добавлено в API сайте*
    + surname (required) ... *фамилия* 
    + passw (required) ... *старый пароль*
    + passwdcheck (required) ... *новый пароль*
    
+ Response 200 (application/json)

    + Headers

            Location: api/changedata?image_person=Base64&name=wezom&surname=mobile&phone=38095256565&passwd=555555@passwdcheck=66666
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Получить информацию пользователя [POST/{uid}/ (use: api/user_info)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/user_info?uid=456
            Method: POST

    + Body
    
            "name" - имя
            "username" - фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "backup_link" - ссылка на backup
            "codes_not_viewed" - коды, которые еще не просмотрены
            
    + Schema

            {
                "success": true,
                "errors": [],
                "name": "Илья",
                "username": "Дегтяренко",
                "backup_link": "HtTp://uRl.CoM",
                "telephone": "380505765684",
                "user_photo": "http://example.net/assets/images/users/1090122_9848.png"
                "codes_not_viewed": 2,
            }

### Запрос списка активированных услуг пользователя [GET/{uid}/{density}/ (use: api/services)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4). Нужен для фона услуги*
    
+ Response 200 (application/json)

    + Headers

            Location: api/services?uid=XXXX
            Method: GET

    + Body

            "services" - массив активированных услуг пользователя:
            "service_id" - идентификатор услуги
            "icon" - иконка
            "avto_prolong" - установленно ли автопродление
            "name" - наименование услуги
            "serial_keys" - список серийных ключей
            "key" - ключ
            "expire_date" - срок действия
            "expired_time" - время истечения услуги (в миллисекундах)
            "program_categories" - массив категорий программ
            "program_list" - массив программ для установки
            "programs - масив активных услуг - програм (с серийным ключом)
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema
    
            {
                "services":
                    [{
                        "name": "Абонентское обслуживание",
                        "service_id": 2,
                        "avto_prolong": true,
                        "expired_time": "1427811446",
                        "program_categories":
                        [
                            {
                                "id": "1", 
                                "name": "Защита от вирусов", 
                                "description": "Описание..."
                            },
                            {
                                "id": "2",
                                "name": "Удаленное управление",
                                "description": "Описание..."
                            }
                        ],              
                        "program_list":
                        [
                            {
                                "id": "1",
                                "category": "1", // идентификатор категории
                                "name": "Dr.Web",
                                "description": "Описание программы",
                                "version": "1.0", // версия программы
                                "url": "http://server/dr_web.apk", // ссылка для скачивания
                                "icon": "http://server/dr_web.png", // иконка
                                "site": "https://www.drweb.ua/", // сайт разработчика
                                "install_priority": "0"  // приоритет для установки
                            }
                        ]
                    }], 
                "programs":
                    [{
                        "program_id": 12,
                        "name": "Dr.Web",
                        "serial_keys":
                        [
                            {
                                "key": "SSAW SDSA SWSW DSDS",
                                "expire_date": 11263323554565
                            }
                        ],
                        "description": "Антивирус..."
                        "version": "1.1.36",
                        "url": "http://...",
                        "icon": "http://...",
                        "site": "http://..."
                    }],
                "success": true, 
                "errors": (array)
            }

### Запрос списка всех услуг [GET/{density}/ (use: api/allservices)]

+ Parameters
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4). Нужен для фона услуги*
    
+ Response 200 (application/json)

    + Headers

            Location: api/allservices?density=XXXX
            Method: GET
    
    + Body
    
            "header" - ссылка на фон с эмблемой услуги/программы (без текстового названия) 
            "is_novelty" - (true,false) новинка это или нет+ 
            "name" - наименование услуги 
            "services" - массив сервисов (на 1 месяц, 2месяца...) 
            "programs" - масив услуг (тип "програма") 
            "program_id" - идентификатор категории 
            "description" - описание программы 
            "version" - версия программы 
            "url" - ссылка для скачивания 
            "icon" - иконка "http://server/dr_web.png" 
            "site" - сайт разработчика "https://www.drweb.ua/" 
            "success" - результат операции (true/false) 
            "errors" - массив содержащий сообщения об ошибках 
            
            Для услуги dr. Web (тип программы) нужны дополнительные данные:
                "catalogs" - массив всех услуг "Абонентское обслуживание" на сайте

    + Schema
    
            {
                "catalogs":
                [
                    {
                        "name": "Абонентское обслуживание",
                        "header": "http://",
                        "is_novelty": true,
                        "services":
                        [
                            {
                                "service_id": "1", 
                                "duration": "15 дней", 
                                "price": "69",
                                "currency": "UAH"
                            }
                        ]
                    }
                ],
                "programs":
                [
                    {
                        "program_id": 12,
                        "name": "Dr.Web",
                        "header": "http://",
                        "is_novelty": true,
                        "description": "Антивирус..."
                        "version”: ”1.1.36",
                        "url": "http://...",
                        "icon”: ”http://...",
                        "site": "http://..."
                    }
                ]
            },
            {
                "success": true,
                "errors": (array)
            }

### Запрос URL для покупки услуги [GET/{service_id}/{uid}/{auto}/ (use: api/buyurl)]

+ Parameters
    + service_id (required, (int)) ... *идентификатор услуги в 1c*
    + uid (required, (int)) ... *идентификатор пользователя*
    + auto (required) ... *автоматически продлевать*
    
+ Response 200 (application/json)

    + Headers

            Location: api/buyurl?service_id =XXXX&uid=XXX&auto=false
            Method: GET

    + Body
    
            "url" - ссылка для покупки услуги, сгенерированная сервером, 
            в зависимости от rate_id который выбрал пользователь
            "post_url" - url адрес перехода пользователя для совершения покупки
            "post_data" - массив параметров необходимый для отправки методом POST для совершения покупки
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Опционально:
                "currency" - валюта которой будет оплачивать клиент. Доступны значения (UAH|RUB)

    + Schema

            {
                "post_url": "https://",
                "post_data":
                [
                    {
                        "var1": "value1",
                        "var2": "value2"
                    }
                ],
                "success": true,
                "errors": (array)
            }

### Автоматическое продления услуги [POST/{uid}/{service_id}/{status}/ (use: api/prolong_service)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор услуги*
    + status (required) ... *установленно ли автопродление*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prolong_service?uid=XXXX&service_id=2&status=true
            Method: POST

    + Body 
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Послать вопрос оператору технической поддержки [POST/{uid}/{message}/{language}/{app_name}/{partner_name} (use: api/sendmessage)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + message (required, (string)) ... *вопрос к оператору технической поддержки*
    + language: `uk` (optional, (string)) - *system messages language -*
        + Default: `ru`
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendmessage?uid=XXXX&message=Добрый%20день
            Method: POST

    + Body
    
            "language" - если указан несуществующий в базе язык, то будет установлен стандартный
            "expert_name" - имя оператора (если свободных экспертов нет, это значение пустое)
            "expert_id" - (int) id эксперта
            "cc_id" - (int) id эксперта для звонков в 3cx
            "dialog_id" - номер диалога с оператором
            "time_of_receipt" - время получения сервером сообщения
            "expect" - ожидать на свободного оператора(true/false)
            "success" - результат операции(true/false)
            "errors" - массив содержащий сообщения об ошибках
            "notice" - иногда cодержит заметки разработчика PHP
            
            Необязательные параметры:
                "dialog_id" - номер диалога с оператором (Если этого параметра нет - начинается новый диалог с оператором. Если есть - то пишем сообщение в текущий диалог)
                "isVideo" (0|1) int
                "partner_id" - id партнера. Например: 1006
                "mobile_app_name" - (string) Название моб приложения, необходимое для его идентификации в отчетах
    
    + Schema

            {
                "expert_name": "Максим",
                "time of receipt": 12312154231354354,
                "expect": "false",
                "success": true,
                "errors": (array)
            }

### Получить ответ от оператора технической поддержки [GET/{uid}/{dialog_id}/{timestamp}/ (use: api/getanswer)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + timestamp (required) ... *время последнего полученного ответа, в виде Unixtime. <br> Если этого параметра нет - начинается новый диалог с оператором. Если есть - то пишем сообщение в текущий диалог*
    
+ Response 200 (application/json)

    + Headers

            Location: api/getanswer?uid=XXXX&dialog_id=XXXX
            Method: GET

    + Body
            
            Необязательные параметры:
            
            "isVideo (0|1) int"
            
            "messages" - ответ
            Так как оператор может написать несколько сообщений со момента последнего опроса, решено переделать это на массив.
            Т.е. возвращаемое значение - массив вида:
            
            Messages:
                [
                    "message" - текст сообщения
                    expert_name - имя оператора
                    "expert_id (int)" - id эксперта
                    "cc_id (int)" - id эксперта для звонков в 3cx
                    "expert_avatar" - аватарка оператора
                    "time" - время сообщения, Unixtime
                    "type" - тип сообщения: system (автоматическое сообщение системы) или normal (сообщение от эксперта)
                ],
                [
                    "message"
                    "expert_name"
                    "expert_avatar"
                    "time"
                    "type"
                ],
                ]
                    "last_timestamp" - время последнего ответа оператора (если новых ответов не было – то возвращается переданное клиентом время)
                    "expert_name" - имяоператора
                    "expert_id (int)" - id эксперта
                    "cc_id (int)" - id эксперта для звонков в 3cx
                    "expert_avatar" - аватарка оператора
                    "time" - время ответа (удалено)
                    "success" - результатоперации (true/false)
                    "errors" - массивсодержащий сообщения об ошибках
                ]

    + Schema

            {
                "message": "Чем могу помочь?",
                "expert_name": "Максим",
                "expert_avatar": "http://",
                "time": "86400000",
                "success": "true", 
                "errors": (array)
            }

### Пользователь прочитал сообщения [GET/{uid}/{dialog_id}/{timestamp}// (use: api/messagesread)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + timestamp (required) ... *время последнего полученного сообщения который прочитал пользователь (это и все сообщения которые пришли раньше этого, должны на сервере автоматически стать прочитанами), в виде Unixtime*
    
+ Response 200 (application/json)

    + Headers

            Location: api/messagesread?uid=XXXX&dialog_id=XXXX&timestamp=1232335565454
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Закрыть диалог с оператором [GET/{uid}/{dialog_id}/{grade}/ (use: api/closedialog)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + grade (required) ... *оценка пользователя, значения: 1,2,3,4,5*
    
+ Response 200 (application/json)

    + Headers

            Location: api/closedialog?uid=XXXX&dialog_id=XXXX&grade=good&opinion=Super
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Необязательные параметры: 
                "opinion" - комментарий пользователя

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Сделай сам (новости) [GET/{density} (use: api/news)]

+ Parameters
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4)*
    
+ Response 200 (application/json)

    + Headers

            Location: api/news?uid=123525density=2
            Method: GET

    + Body

            "news_id" - идентификатор новости
            "title" - заголовок новости
            "description" - описание новости (html формат)
            "header_image" - заголовок новости
            "publish_date" - дата публикации

    + Schema

            {
                "news":
                [{
                    "news_id": 256,
                    "title": "Мастер  класс по фотографии",
                    "description": "Мастер класс от лучших мастеров…"
                    "news_url": "http://…."
                    "header_image": "SCHEME://API_URL/news.png",
                    "publish_date": 1427811446
                }],
                "success": true,
                "errors": (array)
            }

### Активировать Услугу [GET/{uid}/{activation_code}/{activation_code}/{shop_code}/ (use: api/activatecard)]

+ Parameters
    + uid (required, (int)) ... *индификатор пользователя*
    + activation_code (required, (int)) ... *код активации услуги*
    + shop_code (required, (int | max:4)) ... *код магазина*
    
+ Response 200 (application/json)

    + Headers

            Location: api/activatecard?uid=123525&activation_code=245464566542164
            Method: GET

    + Body
    
            Возможные ошибки:
                1000 'Ошибка сервера',
                1007 'Нечего менять',
                1105 'Защита+ была активирована другим пользователем',
                1106 'Ошибка сервера',

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "errors" - подарки

    + Schema

            {
                "success": true,
                "errors": (array),
                "gift": (array)
            }

### Получить данные о бекапе [GET/{uid}/ (use: api/getinfo_backup)]

+ Parameters
    + uid (required, (int)) ... *идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/getinfo_backup?uid=123525
            Method: GET

    + Body

            "isbackup" - статус бекапа
            "date" - дата создания бекапа (timestamp или 0 если нет бекапа)

    + Schema

            {
                "success" :true,
                "errors": (array),
                "isbackup": 1,
                "date": 1130304721
            }

### Записать данные о бекапе [GET/{uid}/{isbackup}/{date}/ (use: api/putinfo_backup)]

+ Parameters
    + uid (required, (int)) ... *идентификатор пользователя*
    + isbackup (required, (string)) ... *статус бекапа*
    + date (required,  (timestamp)) ... *дата создания бекапа string*
    
+ Response 200 (application/json)

    + Headers

            Location: api/putinfo_backup?uid=123525&isbackup=1&date=1130304721
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Формат ошибок [GET/ (use: base/api/bonuses/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/bonuses/get
            Method: GET

    + Body
            
            Ошибки возвращаются в соответствии со стандартом JSON-RPC. 
            Пример возвращаемой ошибки, связанной с неверной регистрацией:

            Все ошибки характеризуются тремя полями:
                "error.message" - строковой код ошибки
                "error.data" - детальное описание ошибки
                "error.code" - в дальнейшем называется числовым кодом ошибки

    + Schema
    
            {
                "error":
                    {
                        "code": 1,
                        "message": "authenticationError",
                        "data": "Wrong login or password"
                    }
            }

### Получить системные уведомления пользователя [GET/{uid} (use: api/notifications)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/notifications?uid=XXXX
            Method: GET

    + Body

            "notification_id" - идентификатор уведомления
            "title" - заголовок уведомления
            "description" - текст уведомления
            "publish_date" - дата уведомления

    + Schema

            {
                "notifications":
                [
                    {
                        "notification_id": 1,
                        "title": ”Мастер класс по фотографии",
                        "description": "Мастер класс от лучших мастеров…",
                        "publish_date": 1427811446,
                    }
                ],
                "success": true, 
                "errors": (array)
            }

### Синхронизировать системные уведомления пользователя [POST/(ANY)/{uid}/{notifications}/ (use: api/sync-notifications)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + notifications (required) ... *массив объектов, где **action** = **delete** (уведомление удалено пользователем),  **action** = **read** (уведомление прочитано пользователем), **id** (идентификатор уведомления полученный ранее запросом **"API_URL/notifications"**)*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sync-notifications?uid=XXXX
            Method: ANY

    + Body

            Уведомляем сервер одним запросом об изменениях в статусе "notifications"

            Неправильно оформлен запрос:
                notifications%5Baction%5D=delete&notifications%5Bid%5D=735&uid=1030255

            Пример при котором все работает:
                http://pastenow.ru/2623e1d00e08ae5d191797a602cd8cbe

    + Schema
    
            **-----------------------------Пример запроса-------------------------------------**
            {
                "uid": 100020, //id пользователя
                "notifications":
                [ //массив объектов уведомлений
                    {
                        "id": 235,
                        "action": "delete" //удалено
                    }
                ],
                "id": 236,
                "action": "read" //прочитано
            },
            {
                "id": 237,
                "action": "read"
            }

            **-----------------------------Пример ответа-------------------------------------**

            {
                "success": true,
                "errors": (array),
                "notice" : "Иногда cодержит заметки разработчика PHP"
            }

### Сохранить бэкап-ссылку для приложения [POST/{backup_link} (use: base/api/user/update_backup_link)]

+ Parameters
    + backup_link: `http://backup.su?key=value` (required, (string)) - *app backup-link -*

+ Response 200 (application/json)

    + Headers
    
            Location: base/api/user/update_backup_link
            Method: POST

    + Schema
            
            **================================FAILS======================================**
            ERROR CODE: 120
            **------Parameter 'backup_link' is required------**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 120,
                        "message": "Parameter 'backup_link' is required",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 121
            **------Something went wrong! Can't write to DB------**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 121,
                        "message": "Something went wrong! Can't write to DB",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            **============================SUCCESSFULLY===================================**
            {
                "success": true,
                "status": true,
                "errors": []
            }

# PRS API [/api]
<hr/>

### Получить статус [POST/{uid}/ (use: api/prs_getstatus)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getstatus
            Method: POST

### Получить список услуг [POST/{uid} (use: api/prs_getservices)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getservices
            Method: POST
            
### Отправить заявку [POST/{uid}/{service_id}/{username}/{phone}/{comment}/ (use: api/prs_sendrequest)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор сервиса*
    + username (required) ... *логин пользователя*
    + phone (required) ... *телефон пользователя*
    + comment (required) ... *комментарий*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_sendrequest
            Method: POST
            
### Получить список заявок для выбранной услуги [POST/{uid}/{service_id}/ (use: api/prs_getrequests)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор сервиса*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getrequests
            Method: POST
            
### Активация услуги [POST/{uid}/{code}/{shope_code}/{gift}/ (use: api/prs_activateservice)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + code (required) ... *код*
    + shope_code (required, (number)) ... *код магазина*
    + gift (required) ... *подарок*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_activateservice
            Method: POST
            
### Оценить качество [POST/{uid}/{request_id}/{rating}/{comment}/ (use: api/prs_setgrade)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + request_id (required, (int)) ... *идентификатор запроса*
    + rating (required) ... *рейтинг*
    + comment (required) ... *комментарий*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_setgrade
            Method: POST
            
### Создать услугу (кастомный метод) [POST/{uid}/{passw}/{code}/{shopping_date}/{product_name}/ (use: api/prs_createservice)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + passw (required) ... *пароль*
    + code (required) ... *код*
    + shopping_date (required) ... *дата/время шопинга*
    + product_name (required) ... *имя продукта*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_createservice
            Method: POST
            
# Gift API [/base/api/gifts/]
<hr>

**Error codes:**

**300** - *No codes for this gift type*

**301** - *type_id is required*

**302** - *Invalid XML-file*

**130** - *Parameter 'code_id' is required and must be an integer*

**121** - *Something went wrong! Can't write to DB*

**122** - *Something went wrong! Can't write to DB. Check your code_id*

### Get available types [GET/ (use: base/api/gifts/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/gifts/get
            Method: GET
                    
    + Schema
           
            **-------------------IF USER HAVE AVAILABLE GIFTS-------------------**
            
            {
                "success": true,
                "errors": [],
                "types": 
                [
                    {
                        "id": 1,
                        "title": "iTV",
                        "description": "iTV description",
                        "image_link": "http://iTV"
                    },
                    {
                        "id": 3,
                        "title": "ZORO",
                        "description": "ZORO ZORO",
                        "image_link": "http://exampleLink"
                    }
                ]
            }
            
            **-------------------IF USER HAVEN'T AVAILABLE GIFTS----------------**
            
            {
                "success": true,
                "errors": [],
                "types": []
            }
            
            



### Activate code [POST/{type_id} (use: base/api/gifts/activate)]

+ Parameters
    + type_id (required, (int)) ... *идентификатор типа*

+ Response 200 (application/json)

    + Headers

            Location: base/api/gifts/activate
            Method: POST
        

    + Schema
    
            **-------------------SUCCESSFUL CODE ACTIVATION-------------------**
            
            {
                "success": true,
                "errors": [],
                "code": "666666666",
                "app_link": "https://somelink.com",
                "image_link" : "https://somelink.com/8d60a53828d59f85638b2d55e196ba74.jpg",
                "activation_success_text": "Some custom text related to the gitft_type"
                "title" : "Third type",
                "description" : "code description goes here"
            }
            
            **------------------USER HAVEN'T AVAILABLE GIFTS------------------**
            
            {
                "success": false,
                "errors": 
                [{
                    "code": 301,
                    "message": "User haven't available gifts",
                    "data": ""
                }]
            }
            
            **-------------------NO CODES FOR THIS TYPE----------------------**
            
            {
                "success": false,
                "errors": 
                [{
                    "code": 300,
                    "message": "No codes for iTV",
                    "data": ""
                }]
            }
            
        
            

### Remove code [POST/{id} (use: base/api/gifts/remove/{id})]

+ Parameters
    + id (required) ... *Идентификтор подарка*

+ Response 200 (application/json)
    + Headers
    
            Location: base/api/gifts/remove/{id}
            Method: GET
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1007 'Nothing to change',

    + Schema

            {
                "message": "Нечего менять",
                "data": null,
                "errors": [
                    {
                        "code": 1007,
                        "message": "Нечего менять",
                        "data": "Нечего менять"
                    }
                ]
            }


            {
                "message": "Успешно удалено",
                "data": null,
                "errors": []
            }
      
          


### Clear user's gifts  [POST/ (use: base/api/gifts/clear)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/gifts/clear
            Method: POST

    + Schema

            {
            
            **-------------------SUCCESSFUL RESET USER'S AVAILABLES GIFTS -------------------**
            
                {
                    "success": true,
                    "errors": []
                }
            }

### Get user's codes [GET/ (use: base/api/gifts/user/all)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/gifts/user/all
            Method: GET

    + Schema
    
            **----------------IF USER HASN'T CODES-----------------**
            {
                "success": true,
                "errors": [],
                "data": []
            }
            
            **----------------IF USER HAS CODES-----------------**
            {
                "success": true,
                "errors": [],
                "data": [
                    {
                        "id": 18036,
                        "user_id": 1090122,
                        "code": "2323",
                        "created_at": "2018-03-16 13:56:18",
                        "updated_at": "2018-03-16 13:56:18",
                        "viewed": 1,
                        "type": {
                            "id": 3,
                            "title": "Third type",
                            "description": "RRRRRRRRRRRRRRRRRR",
                            "image_link": "https:\/\/sotest.so24.net\/base\/storage\/gift\/type-images\/0e8ece0f5ab4856ab27e66c74d2b5414.jpg",
                            "app_link": "RRRRRRRRRRRRRR"
                        }
                    },
                    {
                        "id": 18041,
                        "user_id": 1090122,
                        "code": "2323",
                        "created_at": "2018-03-16 14:02:30",
                        "updated_at": "2018-03-16 14:02:30",
                        "viewed": 1,
                        "type": {
                            "id": 4,
                            "title": "Metallic",
                            "description": "Metall",
                            "image_link": "4a9e48fdfe7b34982a908c691babc7c6.jpg",
                            "app_link": "Metall"
                        }
                    }
                ]
            }
            
            **-------------------IF THE GIFT TYPE DOES NOT HAVE A REFERENCE TO THE MOBILE APP-------------------**
            
            {
                "success": true,
                "errors": [],
                "data": [
                    {
                        "id": 18050,
                        "user_id": 1090221,
                        "code": "ce21e12ce12ec",
                        "created_at": "2018-03-16 14:02:30",
                        "updated_at": "2019-07-25 14:05:53",
                        "viewed": 0,
                        "type": {
                            "id": 4,
                            "title": "Metallic",
                            "description": "Metall",
                            "image_link": "https:\/\/sotest.so24.net\/base\/storage\/gift\/type-images\/0e8ece0f5ab4856ab27e66c74d2b5414.jpg",
                            "app_link": ""
                        }
                    }
                ]
            }

### View code [POST/{code_id} (use: base/api/gifts/view)]

In View code method **code_id** is required

+ Parameters
    + code_id: `18037` (required, (int)) - *code id -*

+ Response 200 (application/json)
    
    + Headers

            Location: base/api/gifts/view
            Method: POST

    + Schema
    
            **==========================UNSUCCESSFULLY==========================**
            
            ERROR CODE: 130
            **----Parameter 'code_id' is required and must be an integer----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 130,
                        "message": "Parameter 'code_id' is required and must be an integer",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 121,
            **-----------Something went wrong! Can't write to DB-----------**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 121,
                        "message": "Something went wrong! Can't write to DB",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 122,
            **---Something went wrong! Can't write to DB. Check your code_id---**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 122,
                        "message": "Something went wrong! Can't write to DB. Check your code_id",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            **===========================SUCCESSFULLY===========================**
            
            {
                "success": true,
                "status": true,
                "errors": []
            }

# Bonus API [/base/api/bonuses]
<hr>

**Error codes:**

**10** - *Not authorized*

**11** - *Can't connect to server*

**12** - *Invalid XML-file*

**13** - *Empty name*

**14** - *Invalid card number*

**15** - *Invalid phone number*

**16** - *Not relevance data*

**17** - *User haven't cards*

**18** - *Key card_id is required*

**19** - *Card not found*

**20** - *You alredy save this card before*

* **NOTE #1:** *Every **card's array** has key **"available"**.*

*If **available=1**, then everything is fine.* 

*If **available=0**, then our card info and their server's info do not match.* 

* **NOTE #2:** *In methods **add** and **delete** have been added messages:*

*In **add:** "Карта успешно добавлена".* 

*In **remove:** "Карта успешно удалена".* 

### COMMON ERRORS [PUT]

+ Response 200 (application/json)

    + Headers

            Location: base/api/bonuses/*

    + Schema
            
            ERROR CODE: 10
            **-------------------NOT AUTHORIZED-------------------**
                {
                    "success": false,
                    "errors": [
                        {
                            "code": 10,
                            "message": "Not authorized",
                            "data": "Необходимо авторизоваться"
                        }
                    ]
                }
                
            ERROR CODE: 11
            **----------------CAN'T CONNECT TO SERVER-----------------**
                {
                    "success": false,
                    "errors": {
                        "code": 11,
                        "message": "Can't connect to server",
                        "data": "Не удалось подключиться к серверу"
                    },
                    "cards": []
                }

            ERROR CODE: 12
            **----------------INVALID XML-FILE-----------------**
                {
                    "success": false,
                    "errors": {
                        "code": 12,
                        "message": "Invalid XML-file",
                        "data": "Ошибка сервера"
                    },
                    "cards": []
                }
                
### Get all user's cards [GET/ (use: base/api/bonuses/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/bonuses/get
            Method: GET

    + Schema
    
            **==============================FAILS=====================================**
            
            ERROR CODE: 17
            **-----------------------USER HAVEN'T CARDS------------------------**  
                {
                    "success": true,
                    "errors": {
                        "code": 17,
                        "message": "User haven't cards",
                        "data": "У вас ещё нет действующих карт"
                    },
                    "cards": []
                }
    
            **===========================SUCCESSFULLY=================================**

            **-----------------------RETURNED LIST OF CARDS ------------------------** 
                {
                    "success": true,
                    "errors": [],
                    "cards": [
                        {
                            "id": 1,
                            "name": "Проскурский Сергей Сергеевич",
                            "card": "000000704040",
                            "phone": "375291114804",
                            "data": {
                                "activeBonuses": 15852,
                                "nextActivationDate": "2018-04-06T00:00:00+03:00",
                                "nextActivationSum": 440,
                                "nextCancelingDate": "2018-08-27T00:00:00+03:00",
                                "nextCancelingSum": 250,
                                "nonActiveBonuses": 440
                            },
                            "available": 1
                        },
                        {
                            "id": 4,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 2040,
                                "nextActivationDate": null,
                                "nextActivationSum": 0,
                                "nextCancelingDate": "2018-09-19T00:00:00+03:00",
                                "nextCancelingSum": 2040,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }

### Add new card [POST/ (use: base/api/bonuses/add)]

In add method **name**, **card** and **phone** are required.

+ Response 200 (application/json)

    + Headers

            Location: base/api/bonuses/add
            Method: POST
            Request: (string)name, (numeric)card, (int)phone

    + Schema

            **=========================FAILS=================================**
               
            ERROR CODE: 13
            **-----------------------EMPTY NAME-----------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 13,
                        "message": "Empty name",
                        "data": "Введи ваше полное имя"
                    },
                    "cards": []
                }
                
            ERROR CODE: 14
            **-------------------INVALID CARD NUMBER-------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 14,
                        "message": "Invalid card number",
                        "data": "Введите корректный номер карты"
                    },
                    "cards": []
                }
                
            ERROR CODE: 15
            **-------------------INVALID PHONE NUMBER-------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 15,
                        "message": "Invalid phone number",
                        "data": "Введите корректный номер телефона"
                    },
                    "cards": []
                }
            
            ERROR CODE: 16
            **--------------------NOT RELEVANCE DATA--------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 16,
                        "message": "Not relevance data",
                        "data": "Карта с указанными данными не найдена"
                    },
                    "cards": []
                }


            **=========================SUCCESSFULLY=================================**
            
            **---------------RETURNED LIST OF CARDS WITH ADDED NEW------------------**            
                {
                    "success": true,
                    "errors": [],
                    "message": "Карта успешно добавлена",
                    "cards": [
                        {
                            "id": 6,
                            "name": "Пичугина Александра Олеговна",
                            "card": "",
                            "phone": "",
                            "data": [],
                            "available": 0
                        },
                        {
                            "id": 7,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        },
                        {
                            "id": 9,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }

### Remove card [POST/ (use: base/api/bonuses/remove)] 

In remove method **card_id** is required.

+ Response 200 (application/json)

    + Headers

            Location: base/api/bonuses/remove
            Method: POST
            Request: (int)card_id

    + Schema
    
            **==================================FAILS====================================**
            
            ERROR CODE: 18
            **--------------------------CARD NOT FOUND IN DB-----------------------------**            
                {
                    "success": true,
                    "errors": {
                        "code": 19,
                        "message": "Key card_id is required",
                        "data": ""
                    },
                    "cards": []
                }
            
            ERROR CODE: 19
            **--------------------------CARD NOT FOUND-----------------------------**            
                {
                    "success": true,
                    "errors": {
                        "code": 19,
                        "message": "Card not found",
                        "data": "Карта не найдена"
                    },
                    "cards": []
                } 
               
               
            **============================SUCCESSFULLY=================================**

            **----------------RETURNED LIST OF CARDS WITHOUT REMOVED------------------**            
                {
                    "success": true,
                    "errors": [],
                    "message": "Карта успешно удалена",
                    "cards": [
                        {
                            "id": 6,
                            "name": "Пичугина Александра Олеговна",
                            "card": "",
                            "phone": "",
                            "data": [],
                            "available": 0
                        },
                        {
                            "id": 7,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }
                
# Insurance API [/base/api/insurance]
<hr>

**Actions:**

&nbsp;&nbsp;&nbsp;**success** - *Everything is good*

&nbsp;&nbsp;&nbsp;**error** - *Error*

&nbsp;&nbsp;&nbsp;**auth** - *Need login*

&nbsp;&nbsp;&nbsp;**activate** - *Need activation (registration)*
<br><br>

**Available statuses of the contract:**

&nbsp;&nbsp;&nbsp;**2** - *Need confirmation by sms*

&nbsp;&nbsp;&nbsp;**3** - *Form is not filled*

&nbsp;&nbsp;&nbsp;**4** - *Completed contract*
<br><br>

**Error codes:**

Smart errors:<br>

&nbsp;&nbsp;&nbsp;**10** - *Not authorized*

&nbsp;&nbsp;&nbsp;**100** - *unknown_error:[err, errno] (unknown error in response from Insurance)*

&nbsp;&nbsp;&nbsp;**101** - *Invalid phone number*

&nbsp;&nbsp;&nbsp;**102** - *Contract number is required*

&nbsp;&nbsp;&nbsp;**103** - *[Required parameters: ||(&&) Wrong format in:] (required parameter was not entered or(and) wrong format in fields...)*

&nbsp;&nbsp;&nbsp;**104** - *Parameters "smsid" and "otp" are required*

&nbsp;&nbsp;&nbsp;**105** - *Contract not found*

&nbsp;&nbsp;&nbsp;**106** - *Too long connection*

&nbsp;&nbsp;&nbsp;**700** - *Server error, data was not received*

<br>Insurance errors:<br>

&nbsp;&nbsp;&nbsp;**401** - *Wrong phone number*

&nbsp;&nbsp;&nbsp;**402** - *Phone number not found*

&nbsp;&nbsp;&nbsp;**411** - *No contract number*

&nbsp;&nbsp;&nbsp;**412** - *Contract number already used*

&nbsp;&nbsp;&nbsp;**415** - *Invalid contract number*

&nbsp;&nbsp;&nbsp;**416** - *Wrong phone number*

&nbsp;&nbsp;&nbsp;**421** - *Incorrect one-time password*

&nbsp;&nbsp;&nbsp;**422** - *One-time password not found*

&nbsp;&nbsp;&nbsp;**423** - *Contract not found*

&nbsp;&nbsp;&nbsp;**424** - *One-time password already used'*

&nbsp;&nbsp;&nbsp;**431** - *Contract not found*

&nbsp;&nbsp;&nbsp;**432** - *Invalid index*

&nbsp;&nbsp;&nbsp;**433** - *No index*

&nbsp;&nbsp;&nbsp;**434** - *Area not found*

&nbsp;&nbsp;&nbsp;**435** - *Area not found*

&nbsp;&nbsp;&nbsp;**436** - *Settlement not found*

&nbsp;&nbsp;&nbsp;**437** - *Settlement not found*

&nbsp;&nbsp;&nbsp;**438** - *Street not found*

&nbsp;&nbsp;&nbsp;**439** - *Street not found*

&nbsp;&nbsp;&nbsp;**441** - *Verification code not found*

&nbsp;&nbsp;&nbsp;**442** - *Verification code already used*

&nbsp;&nbsp;&nbsp;**453** - *Invalid token*

&nbsp;&nbsp;&nbsp;**454** - *Token for another number*

&nbsp;&nbsp;&nbsp;**511** - *Database error, the contract was not added*

&nbsp;&nbsp;&nbsp;**512** - *One-time password was not added*

&nbsp;&nbsp;&nbsp;**513** - *The status of the contract isn\'t changed*

&nbsp;&nbsp;&nbsp;**522** - *One-time password not used*

<br><br>

**NOTE #1:** *Each response has key* ***action***, *its values:* ***auth***, ***activate***, ***error***, ***success***  

### LIST ERRORS [PUT]

+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/*

    + Schema

            =====================Smart errors=======================
            
            ERROR CODE: 10
            **-------------------Not authorized-------------------**
                {
                    "success": false,
                    "action": "auth",
                    "errors": [{
                        "code": 10,
                        "message": "Not authorized",
                        "data": "Необходимо авторизоваться"
                    }],
                    "data": []
                }
                
            ERROR CODE: 100
            **------------------Unknown error------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 100,
                        "message":  
                            "unknown_error:" => {
                                "errno" => 123,
                                "err" => "Error text",
                            },
                        "data": "Неизвестная ошибка"
                    }],
                    "data": []
                }
                
            ERROR CODE: 101
            **----------------Invalid phone number--------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 101,
                        "message": "Invalid phone number"
                        "data": "Введите корректный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 102
            **------------Contract number is required-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 102,
                        "message": "Contract number is required",
                        "data": "Введите корректный номер договора"
                    }],
                    "data": []
                }
                
            ERROR CODE: 103
            **-----------Required params/Wrong format----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [
                        {
                            "code": 103,
                            "message": {
                                "require": "Required parameters: cid, name, passport, passportdate, model",
                                "wrong_format": "Wrong format in: email, index"
                            },
                            "data": "Введите корректные данные"
                        }
                    ],
                    "data": []
                }
                
            ERROR CODE: 104
            **----Parameters "smsid" and "otp" are required----**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 104,
                        "message": "Parameters "smsid" and "otp" are required",
                        "data": "Ошибка сервера"
                    }],
                    "data": []
                }
                
            ERROR CODE: 105
            **---------------Contract not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 105,
                        "message": "Contract not found",
                        "data": "Ошибка сервера, указанный контракт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 106
            **---------------Too long connection--------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [
                        {
                            "code": 106,
                            "message": "Too long connection",
                            "data": "Ошибка сервера, данные не были получены"
                        }
                    ],
                    "data": []
                }
                
            ERROR CODE: 700
            **-------Server error, data was not received-------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 700,
                        "message": "Server error, data was not received",
                        "data": "Ошибка сервера, данные не были получены"
                    }],
                    "data": []
                }

            ==================Insurance errors====================
                
            ERROR CODE: 401
            **----------------Wrong phone number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 401,
                        "message": "Wrong phone number",
                        "data": "Неверный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 402
            **--------------Phone number not found--------------**
                {
                    "success": true,
                    "action": "activate",
                    "errors": [{
                        "code": 402,
                        "message": "Phone number not found",
                        "data": "Номер телефона не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 411
            **----------------No contract number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 411,
                        "message": "No contract number",
                        "data": "Номер договора отсутствует"
                    }],
                    "data": []
                }
                
            ERROR CODE: 412
            **-----------Contract number already used-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 412,
                        "message": "Contract number already used",
                        "data": "Номер договора уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 415
            **--------------Invalid contract number-------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 415,
                        "message": "Invalid contract number",
                        "data": "Неверный номер договора"
                    }],
                    "data": []
                }
                
            ERROR CODE: 416
            **----------------Wrong phone number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 416,
                        "message": "Wrong phone number",
                        "data": "Неверный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 421
            **------------Incorrect one-time password------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 421,
                        "message": "Incorrect one-time password",
                        "data": "Неверный одноразовый пароль"
                    }],
                    "data": []
                }
                
            ERROR CODE: 422
            **------------One-time password not found------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 422,
                        "message": "One-time password not found",
                        "data": "Одноразовый пароль не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 423
            **---------------Contract not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 423,
                        "message": "Contract not found",
                        "data": "Договор не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 424
            **----------One-time password already used----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 424,
                        "message": "One-time password already used",
                        "data": "Одноразовый пароль уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 431
            **---------------Contract not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 431,
                        "message": "Contract not found",
                        "data": "Договор не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 432
            **------------------Invalid index-------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 432,
                        "message": "Invalid index",
                        "data": "Неверный индекс"
                    }],
                    "data": []
                }
                
            ERROR CODE: 433
            **--------------------No index----------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 433,
                        "message": "No index",
                        "data": "Индекс отсутствует"
                    }],
                    "data": []
                }
                
            ERROR CODE: 434
            **------------------Area not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 434,
                        "message": "Area not found",
                        "data": "Район не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 435
            **------------------Area not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 435,
                        "message": "Area not found",
                        "data": "Район не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 436
            **---------------Settlement not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 436,
                        "message": "Settlement not found",
                        "data": "Населенный пункт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 437
            **---------------Settlement not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 437,
                        "message": "Settlement not found",
                        "data": "Населенный пункт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 438
            **-----------------Street not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 438,
                        "message": "Street not found",
                        "data": "Улица не найдена"
                    }],
                    "data": []
                }
                
            ERROR CODE: 439
            **-----------------Street not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 439,
                        "message": "Street not found",
                        "data": "Улица не найдена"
                    }],
                    "data": []
                }
                
            ERROR CODE: 441
            **-----------Verification code not found-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 441,
                        "message": "Verification code not found",
                        "data": "Код подтверждения не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 442
            **---------Verification code already used---------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 442,
                        "message": "Verification code already used",
                        "data": "Код подтверждения уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 453
            **-----------------Invalid token------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 453,
                        "message": "Invalid token",
                        "data": "Неверный токен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 454
            **------------Token for another number------------**
                {
                    "success": true,
                    "action": "auth",
                    "errors": [{
                        "code": 454,
                        "message": "Token for another number",
                        "data": "Ошибка сервера, токен для другого номера"
                    }],
                    "data": []
                }
                
            ERROR CODE: 511
            **---Database error, the contract was not added---**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 511,
                        "message": "Database error, the contract was not added",
                        "data": "Ошибка базы данных, договор не был добавлен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 512
            **---------One-time password was not added--------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 512,
                        "message": "One-time password was not added",
                        "data": "Одноразовый пароль не добавлен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 513
            **----The status of the contract isn\'t changed----**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 513,
                        "message": "The status of the contract isn\'t changed",
                        "data": "Статус договора не изменен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 522
            **-----------One-time password not used-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 522,
                        "message": "One-time password not used",
                        "data": "Одноразовый пароль не использован"
                    }],
                    "data": []
                }

### Auth [POST/{tel}/ (use: base/api/insurance/auth)]

In auth method **tel** is required

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*

+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/auth
            Method: POST
            Request: tel

    + Schema
    
            {
                "success": true,
                "action": "auth",
                "errors": [],
                "data": [
                    {
                        "smsid": 446,
                        "expire": 1520064760
                    }
                ]
            }

### Activate [POST/{tel}/{num}/ (use: base/api/insurance/activate)]

In activate method **tel** and **num** are required

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*
    + num (required, (string), `SGTS06000011`) ... *contract number -*

+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/activate
            Method: POST
            Request: tel, num

    + Schema
    
            {
                "success": true,
                "action": "auth",
                "errors": [],
                "data": [
                    {
                        "cid": 45,
                        "smsid": 449,
                        "expire": 1520073617
                    }
                ]
            }

### Sms confirm (otp) [POST/{smsid}/{otp}/{cid}/ (use: base/api/insurance/sms_confirm)]

In sms confirm method **smsid** and **otp** are required, and if from method ***Activate*** parameter **cid** required too

+ Parameters
    + smsid (required, (int), `509`) ... *sms id -*
    + otp (required, (string), `834741`) ... *sms otp -*
    + cid (optional, (int), `36`) ... *contract id (required, if from method @Activate) -*

+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/sms_confirm
            Method: POST
            Request: smsid, otp, cid

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                            {
                                "cid": "3",
                                "num": "SGTS06000011",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/jwmod",
                                "brand": "Apple",
                                "model": "Android 10",
                                "serial": "IMEI923089823728937",
                                "expire": 1537090484,
                                "amount": "2500.00",
                                "name": "Name",
                                "secname": "Secname"
                            },
                            {
                                "cid": "15",
                                "num": "SGTS12000030",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/Gg9lQ",
                                "brand": "MEIZU",
                                "model": "m2",
                                "serial": "867576024920705",
                                "expire": 1553003619,
                                "amount": "12000.00",
                                "name": "Илья",
                                "secname": "Илья"
                            }
                        ]
            }

### Sign form [POST/{cid}/{name}/{secname}/{surname}/{email}/{inn}/{birthday}/{type}/{passport}/{passportdate}/{passportissued}/{index}/{region}/{district}/{city}/{street}/{brand}/{model}/{serial}/ (use: base/api/insurance/sign_form)]

In sign form method:

Request: **cid**, **name**, **secname**, **surname**, **email**, **inn**, 
**birthday**, **type**, **passport**, **passportdate**, **passportissued**, **index**, **region**, 
**district**, **city**, **street**, **brand**, **model**, **serial**

Required: **cid**, **name**, **secname**, **surname**, **birthday**, **type**, 
**passport**, **passportdate**, **passportissued**, **region**, **district**, **city**, **brand**, 
**model**, **serial**

Not required: **email**, **inn**, **index**, **street**

+ Parameters
    + cid (required, (int), `37`) ... *contract id -*
    + name (required, (string), `Bill`) ... *name -*
    + secname (required, (string), `Bobovich`) ... *secname -*
    + surname (required, (string), `Jhonson`) ... *surname -*
    + email (optional, (string), `mail@gmail.com`) ... *email -*
    + inn (optional, (int), `1112212321`) ... *inn -*
    + birthday (required, (string), `31.12.2022`) ... *birthday date -*
    + type: `1` (required, (int)) - *type (passport or card number) -*
        + Members
            - `1`
            - `2`
    + passport (required, (string), `АВ123456`) ... *passport -*
    + passportdate (required, (string), `10.12.2018`) ... *passportdate date -*
    + passportissued (required, (string), `RO MVD Voenkom`) ... *passportissued -*
    + index (optional, (int), `49000`) ... *index -*
    + region (required, (string), `Dnepropetrovskiy`) ... *region -*
    + district (required, (string), `Dnepr`) ... *district -*
    + city (required, (string, `Dnepr`)) ... *city -*
    + street (optional, (string), `Shevchenko`) ... *street -*
    + brand (required, (string), `Apple`) ... *brand -*
    + model (required, (string), `Android 10`) ... *model -*
    + serial (required, (string), `IMEI923089823728937`) ... *serial -*

+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/sign_form
            Method: POST
            Request: cid, name, secname, surname, email, inn, birthday, type, passport, passportdate, passportissued, index, region, district, city, street, bran, model, serial

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                    {
                        "status": 4,
                        "pdf": "https://dev.digins.ua/pdf/mZaeF"
                    }
                ]
            }

### List [POST/{tel}/{cid}/ (use: base/api/insurance/get_list_contracts)]

In method list **tel** is required. If you whant get one contract add to request **cid**.

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*
    + cid (optional, (int), `3`) ... *contract number -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/list
            Method: POST
            Request: tel, cid

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                            {
                                "cid": "3",
                                "num": "SGTS06000011",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/jwmod",
                                "brand": "Apple",
                                "model": "Android 10",
                                "serial": "IMEI923089823728937",
                                "expire": 1537090484,
                                "amount": "2500.00",
                                "name": "Name",
                                "secname": "Secname"
                            },
                            {
                                "cid": "15",
                                "num": "SGTS12000030",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/Gg9lQ",
                                "brand": "MEIZU",
                                "model": "m2",
                                "serial": "867576024920705",
                                "expire": 1553003619,
                                "amount": "12000.00",
                                "name": "Илья",
                                "secname": "Илья"
                            }
                ]
            }

### Check filled contracts [POST// (use: base/api/insurance/check_filled_contracts)]
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/check_filled_contracts
            Method: POST

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "filled": 1 //(or 0, if no filled)
            }

### Send push Errors [PUT/ (use void)]

+ Response 200

    + Body
    
            В ответе сервера могут быть указаны ошибки в массиве.
            Если массив ошибок пуст то запрос выполнен успешно.

            Обьект ошибки имеет следующие параметры:
                "code" - int - Код ошибки
                "message" - string - Тест ошибки
            
            Пример ответа с ошибкой
                {
                    "message": "Ошибка отправки сообщения",
                    "errors": [
                        {
                            "code": 4,
                            "message": "Параметр text_uk не может быть пустым",
                        },
                        {
                            "code": 3,
                            "message": "Параметр text_ru не может быть пустым",
                        },
                    ]
                }

            Список ошибок
                1 Не верный ключ
                2 Номер договора не может быть пустым
                3 Параметр text_ru не может быть пустым
                4 Параметр text_uk не может быть пустым
                5 Нет клиента с данным номером договора
                6 Нет токена для связи с устройством или его срок действия истек
                7 Не верный формат списка договоров


### Send push to app [POST/{cid}/{public_key}/{text_ru}/{text_uk}/ (use: base/mobile_api/insurance/send_push)]

+ Parameters
    + cid (required, (string), `2`) ... *ID контракта/договора в системе -*
    + public_key (required, (int), `3`) ... *Ключ доступа -*
    + text_ru (required, (int), `3`) ... *Текст сообщения на русском -*
    + text_uk (required, (int), `3`) ... *Текст сообщения на украинском -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/send_push
            Method: POST

    + Body 

            {
            "cid": "2",
            "text_ru": "Договор истекает через 3 дня",
            "text_uk": "Договір закінчується через 3 дні",
            "public_key": "some_key"
            }

    + Schema
    
            {
                "data": "Ошибка отправки сообщения",
                "errors": [
                    {
                        "code": 4,
                        "message": "Параметр text_uk не может быть пустым",
                    },
                ]
            }


### Send push to multiple divaces [POST/{cids}/{public_key}/{text_ru}/{text_uk}/ (use: base/mobile_api/insurance/send_push_multiple)]
    
+ Parameters
    + cids (required, (array), `2`) ... *Массив ID контрактов/договоров в системе -*
    + public_key (required, (int), `somekey`) ... *Ключ доступа -*
    + text_ru (required, (int), `3`) ... *Текст сообщения на русском -*
    + text_uk (required, (int), `3`) ... *Текст сообщения на украинском -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/send_push_multiple
            Method: POST

    + Body 

            {
            "text_ru":"Договор истекает через 3 дня",
            "text_uk":"Договір закінчується через 3 дні",
            "public_key":"some_key",
            "cids": ["1003","1004"]
            }

    + Schema
    
            {
                "cids": [
                    {
                        "cid": 1003,
                        "data": 'Сообщение не отправлено',
                        "errors": [
                            {
                                "code": 6,
                                'message' => 'Нет токена для связи с устройством или его срок действия истек '
                            }
                        ]
                    },
                    {
                        "cid": 1004,
                        "data": 'Сообщение отправлено',
                        "errors": []
                    }
                ],
                "data": "Запрос выполнен успешно",
                "errors": [
                    {
                        "code": 4,
                        "message": "Параметр text_uk не может быть пустым"
                    }
                ],
            }

### Send push to multiple divaces [POST/{cids}/{public_key}/ (use: base/mobile_api/insurance/send_push_multiple_personalized)]
    
+ Parameters
    + cids (required, (array), `2`) ... *Массив ID контрактов/договоров в системе -*
    + public_key (required, (int), `somekey`) ... *Ключ доступа -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/send_push_multiple_personalized
            Method: POST

    + Body 

            {
            "public_key": "some_key",
            "cids": [
            {
            "text_ru": "Договор 1002 истекает через 3 дня",
            "text_uk": "Договір 1002 закінчується через 3 дні",
            "cid": "1006"
            },
            {
            "text_ru": "Договор 1003 истекает через 3 дня",
            "text_uk": "Договір 1003 закінчується через 3 дні",
            "cid": "1005"
            }
            ]
            }

    + Schema
    
            {
                "cids": [
                    {
                        "cid": "1002",
                        "data": "Сообщение отправлено",
                        "errors": []
                    },
                    {
                        "cid": "1005",
                        "data": "Ошибка отправки сообщения",
                        "errors": [
                            {
                                "code": 5,
                                "message": "Нет клиента с данным номером договора"
                            }
                        ]
                    }
                ],
                "data": "Запрос выполнен успешно",
                "errors": []
            } 


# Chat API [/base/api/messages]
<hr/>

### Get messages chunk [POST/{page}/{count}/  (use: base/api/messages/chunk)]

**NOTE #1:** *This method has key a **count** (messages count), if query has't a count, then **count=25** (default)*

**NOTE #2:** *If query contains a key **page**, then you get messages from this page in response. If not, then you get **count** last messages*

Keys **page** and **count** are not required

+ Parameters
    + count: `5` (optional, (int)) - *messages count -*
        + Default: `25`
    + page: `2` (optional, (int)) - *page number -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/messages/chunk
            Method: POST
            Request: count, page
            
    + Body

            display - count of displayed messages
            quantity - total count of messages
            conv_id (if conv_id=0 - dialog isn't active)


    + Schema

            **============================SUCCESSFULLY=================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": 3,
                "total": 6,
                "current_page": 1,
                "last_page": 2,
                "conv_id" => 23231,
                "data": [
                    {
                        "id": 225485,
                        "name": "Илья Дегтяренко",
                        "message": "Илья входит в чат.",
                        "user": null,
                        "convid": 17578,
                        "time": 1520846666,
                        "class": "notice",
                        "attached_file": "http://...../test.jpg",
                        "plevel": 1,
                        "is_read": 1,
                        "is_uread": 1
                    },
                    {
                        "id": 225486,
                        "name": "Илья Дегтяренко",
                        "message": "Во всех телевизорах выпуска 2016 года используются hdmi разъемы стандарта 1.4<br />\nВ hdmi 1.4 реализована поддержка разрешения 4K х 2К (3840×2160 при 24/25/30 Гц и 4096×2160 при 24 Гц);",
                        "user": "23::380505765684",
                        "convid": 17578,
                        "time": 1520846673,
                        "class": "admin",
                        "attached_file": "http://...../test2.jpg",
                        "plevel": 1,
                        "is_read": 1,
                        "is_uread": 1
                    }
                ]
            }
            
            **==================================FAILS====================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id" => 0,
                "data": []
            }

### Upload file [POST/{conv_id}/{file}/  (use: base/{api|mobile_api}/files/upload)]

Key **conv_id** and **file** are required

+ Parameters
    + conv_id ((int), `102922`) ... *dialog id -* 
    + file ((file), `{file}`) ... *file to upload -* 

+ Response 200 (application/json)

    + Headers

            Location: base/{api|mobile_api}/files/upload
            Method: POST
            Request: conv_id, file

    + Schema
            
            Route "base/api/files/upload" based on Passport token auth
            Route "base/mobile_api/files/upload" based on session auth
            
            **==================================FAILS====================================**
            
            ERROR CODE: 150
            **-Parameter 'conv_id' is required and must be a integer-**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 150,
                        "message": "Parameter 'conv_id' is required and must be a integer                        
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 151
            **--Unknown chat || Chat does not belong to the user--**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 151,
                        "message": "Unknown chat || Chat does not belong to the user",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 152
            **-----------Chat is closed-----------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 152,
                        "message": "Chat is closed",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 153
            **--------Parameter 'file' is required--------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 153,
                        "message": "Parameter 'file' is required",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 154
            **--------File extension not supported--------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 154,
                        "message": "File extension not supported",
                        "data": "Поддерживаемые разрешения файла: png, jpg"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 155
            **------Field connection with file-server------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 155,
                        "message": "Field connection with file-server",
                        "data": "Отправка фотографий в данный момент недоступна"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            **============================SUCCESSFULLY=================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": []
            }

 
# Martlet API [/base/api/martlet]
<hr/>

**Innovation:**  *Returned response array will now have new key **status**, that indicates whether the request is successful or not.*

### Activate code [POST/{code} (use: base/api/martlet/store)]

Parameter **code** is required

+ Parameters
    + code: `'1234567890000000'` (required, (string))
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/martlet/store
            Method: POST
            Request: code
            
            
    + Body
            
            Click on "SHOW JSON SCHEMA" to see examples of response
            
            data['dependence'] - Dependent code data

    + Schema
    
            **==================================FAILS====================================**

            ERROR CODE: 500
            **-----Something went wrong-----**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 500,
                        "message": "Something went wrong in MartletController@store. Request method: POST. Url: api/martlet/store",
                        "data": "Ошибка сервера, данные не были получены."
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 501
            **-----Code required, must be an integer equal to 16 characters-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 501,
                        "message": "Field 'code' is required, must be an integer equal to 16 characters",
                        "data": "Введите корректный код"
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 502
            **-----This code has already been used-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 502,
                        "message": "This code has already been used",
                        "data": "Этот код уже использован"
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 503
            **-----Can't find the code-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 503,
                        "message": "Can't find the code",
                        "data": "Невозможно найти указанный код"
                    }
                ],
                "data": []
            }
            
            **============================SUCCESSFULLY=================================**
            
            LIST OF USER CODES
            **-----User has no codes-----**
            {
                "success": true,
                "status": true,
                "errors": [],
                "data": []
            }

            LIST OF USER CODES
            **-----User has codes-----**
            {
                "success": true,
                "status": true,
                "errors": [],
                "data": [
                    {
                        "id": 60,
                        "code": "1100000000000011",
                        "product": "ПК. Персональный (Polaris Office + NOD32 Smart Security Family)",
                        "user_id": 1090122,
                        "created_at": "2018-06-12 13:19:06",
                        "updated_at": "2018-06-12 13:19:06",
                        "dependence": [
                            {
                                "id": 24,
                                "type": "second",
                                "name": "Polaris office ESD",
                                "licence": "M963D-OSWS0-2HG80-GSEP3-CE1PD",
                                "about": "Polaris Office (multi-device)\n– это один из лучших представителей офисных программ, ключевыми чертами которого является мультиформатная поддержка и быстродействие, вне зависимости от гаджета и ОС.",
                                "created_at": "2018-06-12 13:19:06",
                                "updated_at": "2018-06-12 13:19:06",
                                "code_id": 60
                            },
                            {
                                "id": 25,
                                "type": "second",
                                "name": "ESET NOD32 Smart Security",
                                "licence": "BCAW-W334-7B4H-HA9C-388D",
                                "about": "ESET NOD32 Smart Security\nозволит сделать вашу работу в сети Интернет безопасной и максимально защищенной. Оставайтесь защищенными в социальных сетях, изучайте интернет-ресурсы, делайте покупки онлайн или просто играйте. Интеллектуальные технологии защиты позаботятся о вашей безопасности.",
                                "created_at": "2018-06-12 13:19:06",
                                "updated_at": "2018-06-12 13:19:06",
                                "code_id": 60
                            }
                        ]
                    },
                    {
                        "id": 61,
                        "code": "0000000000003333",
                        "product": "Kaspersky Internet Security 2 Device 1 year Base",
                        "user_id": 1090122,
                        "created_at": "2018-06-12 13:19:37",
                        "updated_at": "2018-06-12 13:19:37",
                        "dependence": [
                            {
                                "id": 26,
                                "type": "second",
                                "name": "Kaspersky Internet Security 2 Device 1 year Base",
                                "licence": "9X6RE-L09L7-H4483-VVOHC",
                                "about": "Kaspersky Internet Security для всех устройств (multi-device)\n– единое решение для защиты всех ваших устройств. Каким бы устройством вы ни пользовались, ваша информация всегда надежно защищена. Лицензия на 2 устройства – для самых практичных пользователей, которым достаточно всего двух устройств, чтоб преуспевать в работе, учебе или просто для развлечения. В течение всего года Kaspersky Internet Security будет защищать, например, ваш смартфон и ПК.",
                                "created_at": "2018-06-12 13:19:37",
                                "updated_at": "2018-06-12 13:19:37",
                                "code_id": 61
                            }
                        ]
                    }
                ]
            }
            
### List user codes [GET/ (use: base/api/martlet/show)]

+ Response 200 (application/json)

    + Headers

            Location: base/api/martlet/show
            Method: GET

    + Schema

                LIST OF USER CODESCha
                **-----User has no codes-----**
                {
                    "success": true,
                    "status": true,
                    "errors": [],
                    "data": []
                }
    
                LIST OF USER CODES
                **-----User has codes-----**
                {
                    "success": true,
                    "status": true,
                    "errors": [],
                    "data": [
                        {
                            "id": 60,
                            "code": "1100000000000011",
                            "product": "ПК. Персональный (Polaris Office + NOD32 Smart Security Family)",
                            "user_id": 1090122,
                            "created_at": "2018-06-12 13:19:06",
                            "updated_at": "2018-06-12 13:19:06",
                            "dependence": [
                                {
                                    "id": 24,
                                    "type": "second",
                                    "name": "Polaris office ESD",
                                    "licence": "M963D-OSWS0-2HG80-GSEP3-CE1PD",
                                    "about": "Polaris Office (multi-device)\n– это один из лучших представителей офисных программ, ключевыми чертами которого является мультиформатная поддержка и быстродействие, вне зависимости от гаджета и ОС.",
                                    "created_at": "2018-06-12 13:19:06",
                                    "updated_at": "2018-06-12 13:19:06",
                                    "code_id": 60
                                },
                                {
                                    "id": 25,
                                    "type": "second",
                                    "name": "ESET NOD32 Smart Security",
                                    "licence": "BCAW-W334-7B4H-HA9C-388D",
                                    "about": "ESET NOD32 Smart Security\nозволит сделать вашу работу в сети Интернет безопасной и максимально защищенной. Оставайтесь защищенными в социальных сетях, изучайте интернет-ресурсы, делайте покупки онлайн или просто играйте. Интеллектуальные технологии защиты позаботятся о вашей безопасности.",
                                    "created_at": "2018-06-12 13:19:06",
                                    "updated_at": "2018-06-12 13:19:06",
                                    "code_id": 60
                                }
                            ]
                        },
                        {
                            "id": 61,
                            "code": "0000000000003333",
                            "product": "Kaspersky Internet Security 2 Device 1 year Base",
                            "user_id": 1090122,
                            "created_at": "2018-06-12 13:19:37",
                            "updated_at": "2018-06-12 13:19:37",
                            "dependence": [
                                {
                                    "id": 26,
                                    "type": "second",
                                    "name": "Kaspersky Internet Security 2 Device 1 year Base",
                                    "licence": "9X6RE-L09L7-H4483-VVOHC",
                                    "about": "Kaspersky Internet Security для всех устройств (multi-device)\n– единое решение для защиты всех ваших устройств. Каким бы устройством вы ни пользовались, ваша информация всегда надежно защищена. Лицензия на 2 устройства – для самых практичных пользователей, которым достаточно всего двух устройств, чтоб преуспевать в работе, учебе или просто для развлечения. В течение всего года Kaspersky Internet Security будет защищать, например, ваш смартфон и ПК.",
                                    "created_at": "2018-06-12 13:19:37",
                                    "updated_at": "2018-06-12 13:19:37",
                                    "code_id": 61
                                }
                            ]
                        }
                    ]
                }

# Masters API [/service-masters]
<hr/>

Link to **<a href="#reference/0/token-api/0">base information</a>**.

**Common errors:**<br>

&nbsp;&nbsp;&nbsp;**1000** - *Server error*<br>
&nbsp;&nbsp;&nbsp;**1001** - *Validation error*<br>
&nbsp;&nbsp;&nbsp;**1005** - *The user credentials were incorrect. Check social access_token.*<br>
&nbsp;&nbsp;&nbsp;**1006** - *The user credentials were incorrect.*<br>

### Auth login [POST/{phone}/{password}/  (use: api/auth/login_password)]

**NOTE #1:** Key **phone** can be in formats [***ua, ru, by***].

+ Parameters
    + phone: 380500000009 (required, (numeric)) - *phone number -*
    + password: `my-pswd!#hello,123098765.QWE` (required, (mixed)) - *password -*
    
+ Response 200 (application/json)

    + Headers

            Location: api/auth/login_password
            Method: POST
            Request: phone, password
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}]
            
    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema

            ⭅You can move page using the arrows on the keyboard⭆
            
            
                                                FAILS 💩 

            {
                "message": "Validation error",
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "phone",
                        "data": "The phone field is required"
                    },
                    {
                        "code": 1001,
                        "message": "password",
                        "data": "The password field is required"
                    }
                ]
            }
            
                                                 ••
            
            {
                "message": "Учетные данные пользователя неверны.",
                "data": null,
                "errors": [
                    {
                        "code": 1006,
                        "message": "Учетные данные пользователя неверны.",
                        "data": "Учетные данные пользователя неверны."
                    }
                ]
            }

                                              SUCCESSFULLY 👍

            ❗ Take "access_token" and use it in all other queries to api.
            
            {
                "message": "no message",
                "data": {
                    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjlmMDlmOWM1MzM3YmFlMTE3ZTdiNDJiZDk3NDAyN2M0ZDA4MTNmOWUxMzEwMmI0OTAxNGYwNTljOTAwYmQ2ZDk1ZjdiMjQ0MGJlN2E3OTM0In0.eyJhdWQiOiIzIiwianRpIjoiOWYwOWY5YzUzMzdiYWUxMTdlN2I0MmJkOTc0MDI3YzRkMDgxM2Y5ZTEzMTAyYjQ5MDE0ZjA1OWM5MDBiZDZkOTVmN2IyNDQwYmU3YTc5MzQiLCJpYXQiOjE1NDE3NjM2MTgsIm5iZiI6MTU0MTc2MzYxOCwiZXhwIjoxNTczMjk5NjE4LCJzdWIiOiIzIiwic2NvcGVzIjpbXX0.WsrKQQbY0eNO3SEKtwqr1hwak-FgvxSrBHIVOR9oX1Em-zeURyUf7ik8Z64mDM-mOdaoVHbGh7MKNbFJ5u6u5mwdg1gs467KJKimESaDkN_KPyzTGxzsAJhxYNxGCaApcj8HK1Agn6iUBwKYUgyPL1Tk9zcyNt_TOgp86tRgZL2B2JoYK7hf_YoOW6PzplYasqCzlQulmSn9-GD1dW54bX6V2TsJmbdAg4eD21qWeZqv_v-HEjeu8DmHeadPGpNh66WBeBRz_wdGIM9k28YFIX4eZ9APJ9_W2-2H7eFDJP2WxoqOMWriAfRrTgt8WKv2DC4LU2xG3A8bDLiAKqYZpZVyO9gwDNlmYXB3qK3VX9XL2l054kkf9a1mZaHvbsTq6zKzNV_o9TtrCsdxCaKg6-Fa0Yt1WFSrEQGnwmivrs5CGg1n7y0cPuiz4HxB5Jh-jV3QTt4ajeXP84MhNth1PyisI89Ei96_2PDrutasetcf58SI_ybEeAM0eDhUJr-Uj-SIkAMxjDNPJcV3PFOOGfW6szULpCFLD9OCDQYh3GpmBhexJTNRgb6iKoG_zJGSEzIilSY-zCtbqyoyQ6TZe0W30kc_1rmgGJVKK2CzLupb8Gbs3ljA-g9l9RW8HY4o2RCb04GL1dyTVXv1IZfXf7VZdZkBmqW69dhHTK7k1w8",
                    "id": 3,
                    "name": null,
                    "email": "fay.koch@example.com",
                    "phone": "380000000009",
                    "language": "ru"
                },
                "errors": []
            }

### Auth logout [GET/ (use: api/auth/logout)]

+ Response 200 (application/json)

        # Notes:

         Don't forget about "application/json" in "Accept" key of headers.

    + Headers

            Location: api/auth/logout
            Method: GET
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]
            
    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema

            ⭅You can move page using the arrows on the keyboard⭆
            
            
                                                FAILS 💩 
            
            Raw HTML - if "Accept" key !== "application/json" in headers.       

                                                 ••

            {
                "message": "Учетные данные пользователя неверны.",
                "data": null,
                "errors": [
                    {
                        "code": 1005,
                        "message": "Учетные данные пользователя неверны.",
                        "data": "Учетные данные пользователя неверны. Проверьте социальный access_token."
                    }
                ]
            }

                                              SUCCESSFULLY 👍

            {
                "message": "success",
                "data": null,
                "errors": []
            }

### User info [GET/  (use: api/user/info)]

+ Response 200 (application/json)

        # Notes:

         Don't forget about "access_token". Use it in headers.
         Don't forget about "application/json" in "Accept" key of headers.
    
    + Headers

            Location: api/user/info
            Method: GET
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]
            
    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema
    
            ⭅You can move page using the arrows on the keyboard⭆
                
                
                                                FAILS 💩 
 
            Raw HTML - if "Accept" key !== "application/json" in headers.       

                                                 ••

            {
                "message": "Учетные данные пользователя неверны.",
                "data": null,
                "errors": [
                    {
                        "code": 1005,
                        "message": "Учетные данные пользователя неверны.",
                        "data": "Учетные данные пользователя неверны. Проверьте социальный access_token."
                    }
                ]
            }

                                              SUCCESSFULLY 👍

            {
                "message": "no message",
                "data": {
                    "id": 3,
                    "name": null,
                    "email": "fay.koch@example.com",
                    "phone": "380000000009",
                    "language": "ru"
                },
                "errors": []
            }
            
### Task list [POST/{page}/{count}/{status}/{date_range_from}/{date_range_to}  (use: api/task/list)]

The date format in the "**date_range_from**, **date_range_to**" keys should only be **"Y-m-d**".

+ Parameters
    + page: 3 (optional, (int)) - *page number -*
    + count: 10 (optional, (int)) - *tasks count -*
        + Default: 50
    + status: closed (optional, (string)) - *task status -*
        + Default: open && refused
    + date_range_from: `2018-11-09` (optional, (string|date)) - *date range -*
    + date_range_to: `2018-11-09` (optional, (string|date)) - *date range -*

+ Response 200 (application/json)

        # Notes:

         Don't forget about "access_token". Use it in headers.
         Don't forget about "application/json" in "Accept" key of headers.

    + Headers

            Location: api/task/list
            Method: POST
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]

    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema
    
            ⭅You can move page using the arrows on the keyboard⭆
            
            
                                                FAILS 💩
                                                
            Raw HTML - if "Accept" key !== "application/json" in headers.       
                                                
                                                 ••

            {
                "message": "Учетные данные пользователя неверны.",
                "data": null,
                "errors": [
                    {
                        "code": 1005,
                        "message": "Учетные данные пользователя неверны.",
                        "data": "Учетные данные пользователя неверны. Проверьте социальный access_token."
                    }
                ]
            }
            
                                                 ••

            {
                "message": "Validation error", 
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "date_range_from", 👻 Same with "date_range_to"
                        "data": "The date range from is not a valid date"
                    },
                    {
                        "code": 1001,
                        "message": "date_range_to", 👻 Same with "date_range_from"
                        "data": "The date range to field is required when date range from is present"
                    }
                ]
            }

                                              SUCCESSFULLY 👍

            {
                "message": "no message",
                "data": {
                    "display": 0,
                    "total": 3,
                    "current_page": 100500,
                    "last_page": 1,
                    "tasks": [],
                    "status_count": {
                        "accepted": 3,
                        "open": 2,
                        "refused": 1,
                        "working": 4,
                        "closed": 0
                    }
                },
                "errors": []
            }

                                                 ••

            {
                "message": "no message",
                "data": {
                    "display": 19,
                    "total": 19,
                    "current_page": 1,
                    "last_page": 1,
                    "tasks": [
                        {
                            "id": 79,
                            "client_fio": "Ananimous Ananimous",
                            "task_code": null,
                            "client_phone": "375000000001",
                            "client_address": "Демрово, Минская, Минский, ул. течст, д. 12, кв. 43",
                            "client_device": "Ноутбук V3-772G-54208G1TMakk Acer Aspire Ноутбук ACER",
                            "unit": "Минск В.Голубка 2",
                            "type": null,
                            "priority": null,
                            "desired_client_time": " ",
                            "agreed_working_time": null,
                            "working_time": null,
                            "status": "open",
                            "refused_comment": null,
                            "working_planning_comment": null,
                            "close_comment": null,
                            "is_new": 1,
                            "task_type": "repair",
                            "created_at": "07.03.2019 15:26:58",
                            "prs_type": "ПРС",
                            "service_request_id": 5348,
                            "service_id": "100041512093",
                            "description": "Описание: ТЕСТ; Коментарий клиента: ТЕСТ; Причина обращения: Первичная настройка",
                            "business_process_id": "555666333",
                            "max_repair_date": "28.03.2019",
                            "max_repair_price": "769.93"
                        },
                        {
                            "id": 47,
                            "client_fio": "Буенкова Н,Н",
                            "task_code": "90002681106",
                            "client_phone": "80292662064",
                            "client_address": "Борисов Чаловской 53-27",
                            "client_device": null,
                            "unit": "Борисов Гагарина ФайвТрэйд",
                            "type": "АКЦИЯ Установка посудомоечных машин \"ПРЕМИУМ\"",
                            "priority": null,
                            "desired_client_time": "18.04.2019 23:59:59",
                            "agreed_working_time": null,
                            "working_time": null,
                            "status": "open",
                            "refused_comment": null,
                            "working_planning_comment": null,
                            "close_comment": null,
                            "is_new": 1,
                            "task_type": "installation",
                            "created_at": "28.02.2019 11:21:21",
                            "prs_type": null,
                            "service_request_id": null,
                            "service_id": "100576153173",
                            "description": null,
                            "business_process_id": "",
                            "max_repair_date": null,
                            "max_repair_price": ""
                        },
                        ...
                    ],
                    "status_count": {
                        "accepted": 19,
                        "closed": 16,
                        "open": 219,
                        "refused": 24,
                        "working": 1
                    }
                },
                "errors": []
            }
            
### Task edit [POST/{id}/{status}/{refused_comment}/{working_time}/{agreed_working_time}  (use: api/task/edit)]

The date format in the "**working_time**, **agreed_working_time**" keys should only be **"Y-m-d H:m:s || Y-m-d H:m**".

+ Parameters
    + id: 3 (required, (int)) - *task id -*
    + status: accepted (required, (string)) - *task status -*
    + refused_comment: `I'm done` (required, (string)) - *refused comment -*
    + working_time: `2018-10-18 12:00` (required, (string|date)) - *working tike -*
    + agreed_working_time: `2018-10-18 12:00` (required, (string|date)) - *agreed working time -*

+ Response 200 (application/json)

        # Notes:

         Don't forget about "access_token". Use it in headers.
         Don't forget about "application/json" in "Accept" key of headers.

    + Headers

            Location: api/task/edit
            Method: POST
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]

    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema
    
            ⭅You can move page using the arrows on the keyboard⭆
            
            
                                                FAILS 💩

            Raw HTML - if "Accept" key !== "application/json" in headers.       

                                                 ••

                {
                    "message": "Учетные данные пользователя неверны.",
                    "data": null,
                    "errors": [
                        {
                            "code": 1005,
                            "message": "Учетные данные пользователя неверны.",
                            "data": "Учетные данные пользователя неверны. Проверьте социальный access_token."
                        }
                    ]
                }
            
                                                 ••
            
                {
                    "message": "Validation error",
                    "data": null,
                    "errors": [
                        {
                            "code": 1001,
                            "message": "id",
                            "data": "The id field is required"
                        },
                        {
                            "code": 1001,
                            "message": "id",
                            "data": "The id must be an integer"
                        },
                        {
                            "code": 1001,
                            "message": "id",
                            "data": "The selected id is invalid"
                        },
                        {
                            "code": 1001,
                            "message": "status",
                            "data": "The status field is required"
                        },
                        {
                            "code": 1001,
                            "message": "status",
                            "data": "The selected status is invalid"
                        },
                        {
                            "code": 1001, 👻 Same with other dependent keys.
                            "message": "agreed_working_time",
                            "data": "The agreed working time field is required"
                        },
                        {
                            "code": 1001, 👻 Same with other dependent keys.
                            "message": "agreed_working_time",
                            "data": "The agreed working time is not a valid date"
                        }
                    ]
                }

                                                 ••

                {
                    "message": "Эта задача принимается другим пользователем.",
                    "data": null,
                    "errors": [
                        {
                            "code": 1101,
                            "message": "Эта задача принимается другим пользователем.",
                            "data": "Эта задача принимается другим пользователем."
                        }
                    ]
                }

                                                 ••

                {
                    "message": "Вы не можете выполнить эту операцию.",
                    "data": null,
                    "errors": [
                        {
                            "code": 1100,
                            "message": "Вы не можете выполнить эту операцию.",
                            "data": "Вы не можете выполнить эту операцию."
                        }
                    ]
                }

                                              SUCCESSFULLY 👍

                {
                    "message": "Success",
                    "data": null,
                    "errors": []
                }
                
                
                
                
                
# RMS API [/rms/list]
<hr/>


### Task list [POST/{page}/{limit}/{filter}/{order}  (use: api/rms/list)]

The date format in the "**date_range_from**, **date_range_to**" keys should only be **"Y-m-d**".

+ Parameters+
    + page: 3 (optional, (int)) - *page number -*
        + Default: 1
    + limit: 25 (optional, (int)) - *tasks count -*
        + Default: 50
    + filter: array (optional, (array)) - *Array in format {'field_key': 'value'}, "field_key": e.g. status, "value": filter value (string or array). You can prepend field_key with filter type e.g. !=, > e.t.c.*
        + Available types:
        + "!" - not equil
        + "<" - less
        + "<=" - less or equil
        + ">" - more
        + ">=" - more or equil
    + order: array (optional, (array)) - *Array in format {'field_key': 'order'}, "field_key": e.g. status, "oder": asc or desc*

+ Response 200 (application/json)

    + Headers

            Location: api/rms/list
            Method: POST
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]

    + Body

            To the right and above click on "SHOW JSON SCHEMA", to open the response samples.👆
            That's all you need to know.🙃
            
    + Schema
    
            {
                "message": "Учетные данные пользователя неверны.",
                "data": null,
                "errors": [
                    {
                        "code": 1005,
                        "message": "Учетные данные пользователя неверны.",
                        "data": "Учетные данные пользователя неверны. Проверьте социальный access_token."
                    }
                ]
            }
            
                                                 ••
            {
                "message": "Validation error", 
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "date_range_from", 👻 Same with "date_range_to"
                        "data": "The date range from is not a valid date"
                    },
                    {
                        "code": 1001,
                        "message": "date_range_to", 👻 Same with "date_range_from"
                        "data": "The date range to field is required when date range from is present"
                    }
                ]
            }
                                              SUCCESSFULLY 👍
            {
                "message": "no message",
                "data": {
                    "display": 0,
                    "total": 3,
                    "current_page": 100500,
                    "last_page": 1,
                    "tasks": [],
                    "status_count": {
                        "accepted": 3,
                        "open": 2,
                        "refused": 1,
                        "working": 4,
                        "closed": 0
                    }
                },
                "errors": []
            }
                                                 ••
            {
                "message": "no message",
                "data": {
                    "display": 19,
                    "total": 19,
                    "current_page": 1,
                    "last_page": 1,
                    "tasks": [
                        {
                            "id": 79,
                            "client_fio": "Ananimous Ananimous",
                            "task_code": null,
                            "client_phone": "375000000001",
                            "client_address": "Демрово, Минская, Минский, ул. течст, д. 12, кв. 43",
                            "client_device": "Ноутбук V3-772G-54208G1TMakk Acer Aspire Ноутбук ACER",
                            "unit": "Минск В.Голубка 2",
                            "type": null,
                            "priority": null,
                            "desired_client_time": " ",
                            "agreed_working_time": null,
                            "working_time": null,
                            "status": "open",
                            "refused_comment": null,
                            "working_planning_comment": null,
                            "close_comment": null,
                            "is_new": 1,
                            "task_type": "repair",
                            "created_at": "07.03.2019 15:26:58",
                            "prs_type": "ПРС",
                            "service_request_id": 5348,
                            "service_id": "100041512093",
                            "description": "Описание: ТЕСТ; Коментарий клиента: ТЕСТ; Причина обращения: Первичная настройка",
                            "business_process_id": "555666333",
                            "max_repair_date": "28.03.2019",
                            "max_repair_price": "769.93"
                        },
                        {
                            "id": 47,
                            "client_fio": "Буенкова Н,Н",
                            "task_code": "90002681106",
                            "client_phone": "80292662064",
                            "client_address": "Борисов Чаловской 53-27",
                            "client_device": null,
                            "unit": "Борисов Гагарина ФайвТрэйд",
                            "type": "АКЦИЯ Установка посудомоечных машин \"ПРЕМИУМ\"",
                            "priority": null,
                            "desired_client_time": "18.04.2019 23:59:59",
                            "agreed_working_time": null,
                            "working_time": null,
                            "status": "open",
                            "refused_comment": null,
                            "working_planning_comment": null,
                            "close_comment": null,
                            "is_new": 1,
                            "task_type": "installation",
                            "created_at": "28.02.2019 11:21:21",
                            "prs_type": null,
                            "service_request_id": null,
                            "service_id": "100576153173",
                            "description": null,
                            "business_process_id": "",
                            "max_repair_date": null,
                            "max_repair_price": ""
                        },
                        ...
                    ],
                    "status_count": {
                        "accepted": 19,
                        "closed": 16,
                        "open": 219,
                        "refused": 24,
                        "working": 1
                    }
                },
                "errors": []
            }

### Task edit GET [GET/{id}  (use: api/rms/edit/{id})]

+ Parameters+
    + id: 3 (required, (int)) - *task id -*


+ Response 200 (application/json)

    + Headers

            Location: api/rms/edit/{id}
            Method: POST
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]

    + Body

            Body txt
            
    + Schema
    
            {
                "message": "Учетные данные пользователя неверны.",
                "data": {
                    "id": {
                        "type": "integer",
                        "value": 123,
                        "eav_key": null
                    },
                    "status": {
                        "type": "select",
                        "value": "122",
                        "options": {
                            "1": "Новая",
                            "2": "В работе",
                        }",
                        "eav_key": null
                    },
                    "request_type_id": {
                        "type": "integer",
                        "value": 7,
                        "eav_key": null
                    },
                    "l32vyuewnflo": {
                        "type": "text",
                        "value": "Ananimous Ananimous",
                        "eav_key": "client_fio"
                    },
                    "fneifnoij334": {
                        "type": "text",
                        "value": "Демрово, Минская, Минский, ул. течст, д. 12, кв. 43",
                        "eav_key": "client_address"
                    },
                    "jndvsm23vsdkj34": {
                        "type": "select",
                        "value": "_2",
                        "relatinal_value": "Минск В.Голубка 2",
                        "options": {
                            "_1": "Минск В.Голубка 2",
                            "_2": "Острой Джамми 33",
                        }",
                        "eav_key": "unit"
                    },
                    "jndvsmvsdkwdj34": {
                        "type": "datetime",
                        "value": "07.03.2019 15:26:58",
                        "eav_key": "max_repair_date"
                    },
                    "cscs34342": {
                        "type": "date",
                        "value": "07.03.2019",
                        "eav_key": "time_of_deadline"
                    },
                },
                "errors": []
            }

### Task edit UPDATE [POST/{id}/{status}/{params}  (use: api/rms/edit/{id})]

+ Parameters+
    + id: 3 (required, (int)) - *task id -*
    + status: accepted (required, (string)) - *task status -*
    + params: values (optional, (any type)) - any additional fields

+ Response 200 (application/json)

    + Headers

            Location: api/rms/edit/{id}
            Method: POST
            Headers: [{"key":"Accept","value":"application/json"}, {"key":"Content-Type","value":"application/json"}, {"key":"Authorization","value":"Bearer eyJ0eXAi..."}]

    + Body

            Body txt
            
    + Schema
    
            {
                "message": "Validation error", 
                "data": null,
                "errors": [
                    {
                        "code": 1001,
                        "message": "date_range_from", Same with "date_range_to"
                        "data": {
                            "param": "cscs34342",
                            "message": "date_range_from", Same with "date_range_to"
                        }
                    },
                    {
                        "code": 1001,
                        "message": "date_range_to", 👻 Same with "date_range_from"
                        "data": {
                            "param": "3412341dfdsa",
                            "message": "datetime wrong formst"
                        }
                    }
                ]
            }