FORMAT: 1A
HOST: http://example.net

# so24apis:

# TOKEN API [/api/client/edit/{firstname}{surname}{phone}{password}{photo}]
<hr/>

### Базовая информация [PUT]

+ Response 200

    + Body
    
            Во всех запросах должены быть указаны заголовоки:
                Authorization: Bearer #TOKEN#
                Accept: application/json
            Здесь вместо '#TOKEN#' должен быить указан токен переданный при регистрации
            Заголовок "Authorization" не указывается в запросах для которых #TOKEN# еще не выдан:
                api/register/password - регистрация с логином и паролем
                api/login/password - аутентификация по логину и паролю
                api/login/social - аутентификация через соцсети (регистрирует если не был создан аккаунт)

            =====================================

            Ответ
            Ответ в формате json имеет следующие обязательные параметры:
                "message" - string - Строка с сообщение от сервера
                "data" - mixed - Формат может быть любой и зависит от конкретного запроса API
                "errors" - array - Массив ошибок
            
            Пример ответа
                {
                    "message": "Saved",
                    "data":"Saved",
                    "errors":[]
                }

            =====================================
            
            Ошибки
            Ошибки указываются в массиве. В одном ответе может быть несколько ошибок в том числе и с один и тем же кодом (пример - ошибки валидации формы ввода).

            Обязательные параметры в обьекте конкретной ошибки:
                "code" - integer - Код ошибки из списка указанного ниже,
                "message" - string - Строка с описание ошибки,
                "data" - mixed - Формат зависит от кода ошибки и может содержать дополнительные данные для обработки ошибки.
            
            Список ошибок
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1004 'Unsupported social provider',
                1005 'The user credentials were incorrect.',
                1006 'The user credentials were incorrect.'
                1007 'Nothing to change',
                1008 'Wrong file format',
                1009 'Field connection with file-server',

            Пример ответа с ошибкой:
            {
                "message": "no message",
                "data": "no data",
                "errors": [
                    {
                        "code": 1007,
                        "message": "Nothing to change",
                        "data": "Nothing to change"
                    },
                    {
                        "code": 1008,
                        "message": "Wrong file format",
                        "data": "Wrong file format"
                    }
                ]
            }
            
            Если пользователь не авторизован (не верный токен, не указан токен и т.д.).
            Ответ будет иметь статус: 401 Unauthorized
            Тело ответа будет содержать:
            {
                "message": "Unauthenticated."
            }

### Регистрация (username + password) [POST/{client_id}/{client_secret}/{phone}/{firstname}/{surname}/{patronymic}/{email}/{password}/ (use: base/api/auth/register)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + phone (required, (integer)) ... *телефон длина зависит от настроек партнера*
    + firstname (required, (string)) ... *имя*
    + surname (optional, (string)) ... *фамилия*
    + patronymic (optional, (string)) ... *отчество*
    + email (optional, (string)) ... *Email*
    + password (required, (string)) ... *пароль*

    
+ Response 200 (application/json)
    + Headers
    
            Location: api/auth/register
            Method: POST

    + Body
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1006 'The user credentials were incorrect.',
                1010 'Can`t save client at this moment. Try again later.'

    + Schema

            {
                "message": "Validation error",
                "data": "Validation error",
                "errors": [
                    {
                        "code": 1001,
                        "message": "phone",
                        "data": "Такое значения поля  phone уже занято"
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string"
                },
                "errors": []
            }


### аутентификация по логину и паролю [POST/{client_id}/{client_secret}/{phone}/{password}/ (use: base/api/auth/login_password)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + phone (required, (integer)) ... *телефон длина зависит от настроек партнера*
    + password (required, (string)) ... *пароль*

    
+ Response 200 (application/json)
    + Headers
    
            Location: api/auth/login_password
            Method: POST

    + Body
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1006 'The user credentials were incorrect.',

    + Schema

            {
                "message": "no message",
                "data": "no data",
                "errors": [
                    {
                        "code": 1006,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect."
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string"
                },
                "errors": []
            }

### аутентификация/регистрация соцсети [POST/{client_id}/{client_secret}/{provider}/{accessToken}/ (use: base/api/auth/login_social)]

+ Parameters
    + client_id (required, (string)) ... *id клиента - выдается сервером oauth*
    + client_secret (required, (string)) ... *выдается сервером oauth*
    + provider (required, (integer)) ... *кодовый ключ соцсети, например 'google'*
    + accessToken (required, (string)) ... *токен выданный соцсетью*

    
+ Response 200 (application/json)
    + Headers
    
            Location: api/auth/login_social
            Method: POST

    + Body
    
            Кодовые имена соцсетей:
                'google',
                'facebook',
                'vkontakte',
                'odnoklassniki'
    
            Возможные ошибки:
                1000 'Server error',
                1001 'Validation error',
                1002 'client_id not found',
                1003 'bad client_id',
                1004 'Unsupported social provider',
                1005 'The user credentials were incorrect. Check social access_token.',
                1006 'The user credentials were incorrect.',

    + Schema

            {
                "message": "no message",
                "data": "no data",
                "errors": [
                    {
                        "code": 1006,
                        "message": "The user credentials were incorrect.",
                        "data": "The user credentials were incorrect."
                    }
                ]
            }
            {
                "message": "no message",
                "data": {
                    "token_type": "Bearer",
                    "expires_in": 31536000,
                    "access_token": "token_string",
                    "refresh_token": "refresh_token_string"
                },
                "errors": []
            }

### Изменение данных пользователя [POST]

+ Parameters
    + firstname (optional, (string)) ... *имя*
    + surname (optional, (string)) ... *фамилия*
    + phone (optional, (integer)) ... *телефон длина зависит от настроек партнера*
    + password (optional, (string)) ... *пароль минимум 6 символов*
    + photo (optional, (string)) ... *фото пользователя в формате **Base64***

    
+ Response 200 (application/json)
    + Headers
    
            Location: api/client/edit
            Method: POST
            Authorization: Bearer #TOKEN#

    + Body
    
            Возможные ошибки:
                1001 'Validation error',
                1007 'Nothing to change',
                1008 'Wrong file format',
                1009 'Field connection with file-server',

    + Schema

            {
                "message": "Saved",
                "data":"Saved",
                "errors": (array)
            }

# HTTP REST API [/api/]
<hr/>

### Базовая информация [PUT]

+ Response 200

    + Body
    
            Версия: "1.2"
            
            Все передаваемые данные должны быть в кодировке "UTF-8"
            
            Все номера телефонов должны быть представлены в виде строк чисел в международном формате: 
            "<3><код страны><код оператора><номер>"
            
            Пример: "380501111111"
            
            SCHEME: "http"
            API_URL: "SCHEME://example.net/api"
            
            Плотность экрана параметр (density):
                
                @1x (не Retina)
                    0 - mdpi (1x)    320x163
                    1 - hpdi (1x)    540x277
                    2 - xhdpi (1x)   720x367
                    3 - xxhdpi (1x)  1080x551
                    4 - xxxhdpi (1x) 1600x817
                
                @2x (Retina, iPhone 4/5/6)
                    5 - mdpi (2x)    640x326
                    6 - hpdi (2x)    1080x554
                    7 - xhdpi (2x)   1440x734
                    8 - xxhdpi (2x)  2116x1079
                    9 - xxxhdpi (2x) 3200x1634
                
                @3x (iPhone 6 plus)
                    10 - mdpi (3x)    800x408
                    11 - hpdi (3x)    1350x693
                    12 - xhdpi (3x)   1800x918
                    13 - xxhdpi (3x)  2700x1376
                    14 - xxxhdpi (3x) 4000x2043

### Регистрация (android и iOS) [POST/{user_photo}/{name}/{surname}/{phone}/{phone_model}/{password}/{password_confirm}/{app_name}/{partner_name}/ (use: api/register)]

+ Parameters
    + user_photo (required) ... *фото пользователя в формате **Base64***
    + name (required) ... *имя*
    + surname (required) ... *фамилия*
    + phone (required) ... *телефон*
    + phone_model (required) ... *модель телефона*
    + password (required) ... *пароль*
    + password_confirm (required) ... *подтверждение пароля*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/register?user_photo=Base64&name=wezom&surname=mobile&phone=38050XXXXXXX@phone_model=LenovoA760
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Регистрация через соц.сеть (android) [POST/{user_photo}/{username}/{social_type}/{social_id}/{app_name}/{partner_name} (use: api/registerSocial)]

+ Parameters
    + user_photo (required) ... *ссылка на фото пользователя*
    + username (required) ... *имя+фамилия (так как соц. сети выдают эту информацию вместе одной строкой)*
    + social_type (required) ... *индикатор соц.сети*
    + social_id (required, (int)) ... *id пользователя в соц.сети*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/registerSocial?user_photo=http://vk.com/images/pk.jpg&username=wezom.mobile&social_type=1@social_id=1565485652
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Индикатор "social_type":
                0 - "google+"
                1 - "facebook"
                2 - "vk"
                3 - "ok"

    + Schema
    
            {
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения регистрации (iOS) [GET/{email}/{code}/ (use: api/checkcode)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    + code (required) ... *код полученный из почтового ящика*
    
+ Response 200 (application/json)

    + Headers

            Location: checkcode?email=tttt@tt.tt&code=XXXXX
            Method: GET

    + Body

            "uid" - уникальный идентификатор пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema
    
            {
                "uid": 1125,
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения регистрации (Android) [GET/{phone}/{code}/ (use: api/checkcode)]

+ Parameters
    + phone (required) ... *телефон*
    + code (required) ... *код полученныйиз СМС*
    
+ Response 200 (application/json)

    + Headers

            Location: api/checkcode?phone=38050XXXXXXX&code=XXXXX
            Method: GET

    + Body

            "uid" - уникальный идентификатор пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "uid": 1125,
                "success": true,
                "errors": (array)
            }

### Авторизация (Android и iOS) [POST/{phone}/{passwd}/{app_name}/{partner_name}/{fcm_token} (use: api/login)]

+ Parameters
    + phone (required, (int), `3805012312312`) ... *телефон*
    + passwd (required) ... *пароль*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    + fcm_token (required, (string)) ... *токен для уведомлений*

+ Response 200 (text/html)

    + Headers

            Location: api/login?phone=38050XXXXXXX&passwd=XXXXX
            Method: POST

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "uid" - id пользователя
            "name" - имя
            "username" - фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "backup_link" - ссылка на backup
            "gift" - доступ к подаркам
            "codes_not_viewed" - коды, которые еще не просмотрены

    + Schema
    
            {
                "success": true,
                "errors": [],
                "uid": "1090122",
                "name": "Илья",
                "username": "Дегтяренко",
                "telephone": "380505765684",
                "user_photo": "http://example.net/assets/images/users/1090122_9848.png",
                "backup_link": "HtTp://uRl.CoM",
                "codes_not_viewed": 0,
                "gift": false
            }

### Авторизация через соц.сеть (Android) [POST/{social_type}/{social_id}/{app_name}/{partner_name} (use: api/loginSocial)]

+ Parameters
    + social_type (required, (int)) ... *индификатор соц.сети*
    + social_id (required, (int)) ... *id пользователя в соц.сети*
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/loginSocial?social_type=1&social_id=123132135456
            Method: POST

    + Body
    
            "name" - имя
            "username" -фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "success" - результат операции(true/false)
            "errors" - массив содержащий сообщения об ошибках
            "gift" - доступ к подаркам

    + Schema

            {
                "name": "Петро",
                "username": ”Петров",
                "telephone": 380953636369,
                "user_photo": "SCHEME://API_URL/123456.png",
                "success": true,
                "errors": "array",
                "gift": false
            }

### Восстановление пароля (iOS) [POST/{email}/ (use: api/sendpasswd)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?email=tttt@tt.tt&passwd
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": "array"
            }

### Проверка кода для завершения восстановления пароля (iOS) [POST/{email}/{code}/ (use: api/sendpasswd)]

+ Parameters
    + email (required) ... *почтовый адресс пользователя*
    + code (required) ... *код полученный из почтового ящика*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?email=tttt@tt.tt&code=XXXXX
            Method: POST

    + Body
            
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": "array"
            }

### Восстановление пароля (Android) [POST/{phone}/ (use: api/sendpasswd)]

+ Parameters
    + phone (required) ... *телефон*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?phone=38050XXXXXXX
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Проверка кода для завершения восстановления пароля (Android) [GET/{phone}/{code}/ (use: api/sendpasswd)]

+ Parameters
    + phone (required) ... *телефон*
    + code (required) ... *код полученныйиз СМС*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendpasswd?phone=8050XXXXXXX&code=XXXXX
            Method: GET

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }
            
### Изменение данных пользователя [POST/{uid}/{image_person}/{name}/{phone}/{surname}/{surname}/{passw}/{passwdcheck}/ (use: api/changedata)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + image_person (required) ... *фото пользователя в формате Base64*
    + name (required) ... *имя*
    + phone (required) ... *телефон  уже добавлено в API сайте*
    + surname (required) ... *фамилия* 
    + passw (required) ... *старый пароль*
    + passwdcheck (required) ... *новый пароль*
    
+ Response 200 (application/json)

    + Headers

            Location: api/changedata?image_person=Base64&name=wezom&surname=mobile&phone=38095256565&passwd=555555@passwdcheck=66666
            Method: POST

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Получить информацию пользователя [POST/{uid}/ (use: api/user_info)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/user_info?uid=456
            Method: POST

    + Body
    
            "name" - имя
            "username" - фамилия
            "telephone" - телефон
            "user_photo" - ссылка на фото пользователя
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "backup_link" - ссылка на backup
            "codes_not_viewed" - коды, которые еще не просмотрены
            
    + Schema

            {
                "success": true,
                "errors": [],
                "name": "Илья",
                "username": "Дегтяренко",
                "backup_link": "HtTp://uRl.CoM",
                "telephone": "380505765684",
                "user_photo": "http://example.net/assets/images/users/1090122_9848.png"
                "codes_not_viewed": 2,
            }

### Запрос списка активированных услуг пользователя [GET/{uid}/{density}/ (use: api/services)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4). Нужен для фона услуги*
    
+ Response 200 (application/json)

    + Headers

            Location: api/services?uid=XXXX
            Method: GET

    + Body

            "services" - массив активированных услуг пользователя:
            "service_id" - идентификатор услуги
            "icon" - иконка
            "avto_prolong" - установленно ли автопродление
            "name" - наименование услуги
            "serial_keys" - список серийных ключей
            "key" - ключ
            "expire_date" - срок действия
            "expired_time" - время истечения услуги (в миллисекундах)
            "program_categories" - массив категорий программ
            "program_list" - массив программ для установки
            "programs - масив активных услуг - програм (с серийным ключом)
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema
    
            {
                "services":
                    [{
                        "name": "Абонентское обслуживание",
                        "service_id": 2,
                        "avto_prolong": true,
                        "expired_time": "1427811446",
                        "program_categories":
                        [
                            {
                                "id": "1", 
                                "name": "Защита от вирусов", 
                                "description": "Описание..."
                            },
                            {
                                "id": "2",
                                "name": "Удаленное управление",
                                "description": "Описание..."
                            }
                        ],              
                        "program_list":
                        [
                            {
                                "id": "1",
                                "category": "1", // идентификатор категории
                                "name": "Dr.Web",
                                "description": "Описание программы",
                                "version": "1.0", // версия программы
                                "url": "http://server/dr_web.apk", // ссылка для скачивания
                                "icon": "http://server/dr_web.png", // иконка
                                "site": "https://www.drweb.ua/", // сайт разработчика
                                "install_priority": "0"  // приоритет для установки
                            }
                        ]
                    }], 
                "programs":
                    [{
                        "program_id": 12,
                        "name": "Dr.Web",
                        "serial_keys":
                        [
                            {
                                "key": "SSAW SDSA SWSW DSDS",
                                "expire_date": 11263323554565
                            }
                        ],
                        "description": "Антивирус..."
                        "version": "1.1.36",
                        "url": "http://...",
                        "icon": "http://...",
                        "site": "http://..."
                    }],
                "success": true, 
                "errors": (array)
            }

### Запрос списка всех услуг [GET/{density}/ (use: api/allservices)]

+ Parameters
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4). Нужен для фона услуги*
    
+ Response 200 (application/json)

    + Headers

            Location: api/allservices?density=XXXX
            Method: GET
    
    + Body
    
            "header" - ссылка на фон с эмблемой услуги/программы (без текстового названия) 
            "is_novelty" - (true,false) новинка это или нет+ 
            "name" - наименование услуги 
            "services" - массив сервисов (на 1 месяц, 2месяца...) 
            "programs" - масив услуг (тип "програма") 
            "program_id" - идентификатор категории 
            "description" - описание программы 
            "version" - версия программы 
            "url" - ссылка для скачивания 
            "icon" - иконка "http://server/dr_web.png" 
            "site" - сайт разработчика "https://www.drweb.ua/" 
            "success" - результат операции (true/false) 
            "errors" - массив содержащий сообщения об ошибках 
            
            Для услуги dr. Web (тип программы) нужны дополнительные данные:
                "catalogs" - массив всех услуг "Абонентское обслуживание" на сайте

    + Schema
    
            {
                "catalogs":
                [
                    {
                        "name": "Абонентское обслуживание",
                        "header": "http://",
                        "is_novelty": true,
                        "services":
                        [
                            {
                                "service_id": "1", 
                                "duration": "15 дней", 
                                "price": "69",
                                "currency": "UAH"
                            }
                        ]
                    }
                ],
                "programs":
                [
                    {
                        "program_id": 12,
                        "name": "Dr.Web",
                        "header": "http://",
                        "is_novelty": true,
                        "description": "Антивирус..."
                        "version”: ”1.1.36",
                        "url": "http://...",
                        "icon”: ”http://...",
                        "site": "http://..."
                    }
                ]
            },
            {
                "success": true,
                "errors": (array)
            }

### Запрос URL для покупки услуги [GET/{service_id}/{uid}/{auto}/ (use: api/buyurl)]

+ Parameters
    + service_id (required, (int)) ... *идентификатор услуги в 1c*
    + uid (required, (int)) ... *идентификатор пользователя*
    + auto (required) ... *автоматически продлевать*
    
+ Response 200 (application/json)

    + Headers

            Location: api/buyurl?service_id =XXXX&uid=XXX&auto=false
            Method: GET

    + Body
    
            "url" - ссылка для покупки услуги, сгенерированная сервером, 
            в зависимости от rate_id который выбрал пользователь
            "post_url" - url адрес перехода пользователя для совершения покупки
            "post_data" - массив параметров необходимый для отправки методом POST для совершения покупки
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Опционально:
                "currency" - валюта которой будет оплачивать клиент. Доступны значения (UAH|RUB)

    + Schema

            {
                "post_url": "https://",
                "post_data":
                [
                    {
                        "var1": "value1",
                        "var2": "value2"
                    }
                ],
                "success": true,
                "errors": (array)
            }

### Автоматическое продления услуги [POST/{uid}/{service_id}/{status}/ (use: api/prolong_service)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор услуги*
    + status (required) ... *установленно ли автопродление*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prolong_service?uid=XXXX&service_id=2&status=true
            Method: POST

    + Body 
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Послать вопрос оператору технической поддержки [POST/{uid}/{message}/{language}/{app_name}/{partner_name} (use: api/sendmessage)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + message (required, (string)) ... *вопрос к оператору технической поддержки*
    + language: `uk` (optional, (string)) - *system messages language -*
        + Default: `ru`
    + app_name (optional, (string)) ... *название приложения*
    + partner_name (optional, (string)) ... *название партнёра*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sendmessage?uid=XXXX&message=Добрый%20день
            Method: POST

    + Body
    
            "language" - если указан несуществующий в базе язык, то будет установлен стандартный
            "expert_name" - имя оператора (если свободных экспертов нет, это значение пустое)
            "expert_id" - (int) id эксперта
            "cc_id" - (int) id эксперта для звонков в 3cx
            "dialog_id" - номер диалога с оператором
            "time_of_receipt" - время получения сервером сообщения
            "expect" - ожидать на свободного оператора(true/false)
            "success" - результат операции(true/false)
            "errors" - массив содержащий сообщения об ошибках
            "notice" - иногда cодержит заметки разработчика PHP
            
            Необязательные параметры:
                "dialog_id" - номер диалога с оператором (Если этого параметра нет - начинается новый диалог с оператором. Если есть - то пишем сообщение в текущий диалог)
                "isVideo" (0|1) int
                "partner_id" - id партнера. Например: 1006
                "mobile_app_name" - (string) Название моб приложения, необходимое для его идентификации в отчетах
    
    + Schema

            {
                "expert_name": "Максим",
                "time of receipt": 12312154231354354,
                "expect": "false",
                "success": true,
                "errors": (array)
            }

### Получить ответ от оператора технической поддержки [GET/{uid}/{dialog_id}/{timestamp}/ (use: api/getanswer)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + timestamp (required) ... *время последнего полученного ответа, в виде Unixtime. <br> Если этого параметра нет - начинается новый диалог с оператором. Если есть - то пишем сообщение в текущий диалог*
    
+ Response 200 (application/json)

    + Headers

            Location: api/getanswer?uid=XXXX&dialog_id=XXXX
            Method: GET

    + Body
            
            Необязательные параметры:
            
            "isVideo (0|1) int"
            
            "messages" - ответ
            Так как оператор может написать несколько сообщений со момента последнего опроса, решено переделать это на массив.
            Т.е. возвращаемое значение - массив вида:
            
            Messages:
                [
                    "message" - текст сообщения
                    expert_name - имя оператора
                    "expert_id (int)" - id эксперта
                    "cc_id (int)" - id эксперта для звонков в 3cx
                    "expert_avatar" - аватарка оператора
                    "time" - время сообщения, Unixtime
                    "type" - тип сообщения: system (автоматическое сообщение системы) или normal (сообщение от эксперта)
                ],
                [
                    "message"
                    "expert_name"
                    "expert_avatar"
                    "time"
                    "type"
                ],
                ]
                    "last_timestamp" - время последнего ответа оператора (если новых ответов не было – то возвращается переданное клиентом время)
                    "expert_name" - имяоператора
                    "expert_id (int)" - id эксперта
                    "cc_id (int)" - id эксперта для звонков в 3cx
                    "expert_avatar" - аватарка оператора
                    "time" - время ответа (удалено)
                    "success" - результатоперации (true/false)
                    "errors" - массивсодержащий сообщения об ошибках
                ]

    + Schema

            {
                "message": "Чем могу помочь?",
                "expert_name": "Максим",
                "expert_avatar": "http://",
                "time": "86400000",
                "success": "true", 
                "errors": (array)
            }

### Пользователь прочитал сообщения [GET/{uid}/{dialog_id}/{timestamp}// (use: api/messagesread)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + timestamp (required) ... *время последнего полученного сообщения который прочитал пользователь (это и все сообщения которые пришли раньше этого, должны на сервере автоматически стать прочитанами), в виде Unixtime*
    
+ Response 200 (application/json)

    + Headers

            Location: api/messagesread?uid=XXXX&dialog_id=XXXX&timestamp=1232335565454
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Закрыть диалог с оператором [GET/{uid}/{dialog_id}/{grade}/ (use: api/closedialog)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + dialog_id (required, (int)) ... *номер диалога с оператором*
    + grade (required) ... *оценка пользователя, значения: 1,2,3,4,5*
    
+ Response 200 (application/json)

    + Headers

            Location: api/closedialog?uid=XXXX&dialog_id=XXXX&grade=good&opinion=Super
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            
            Необязательные параметры: 
                "opinion" - комментарий пользователя

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Сделай сам (новости) [GET/{density} (use: api/news)]

+ Parameters
    + density (required) ... *плотность экрана. Возвращает картинку под нужную плотность экрана (mdpi – 0, hpdi - 1, xhdpi - 2, xxhdpi – 3, xxxhdpi – 4)*
    
+ Response 200 (application/json)

    + Headers

            Location: api/news?uid=123525density=2
            Method: GET

    + Body

            "news_id" - идентификатор новости
            "title" - заголовок новости
            "description" - описание новости (html формат)
            "header_image" - заголовок новости
            "publish_date" - дата публикации

    + Schema

            {
                "news":
                [{
                    "news_id": 256,
                    "title": "Мастер  класс по фотографии",
                    "description": "Мастер класс от лучших мастеров…"
                    "news_url": "http://…."
                    "header_image": "SCHEME://API_URL/news.png",
                    "publish_date": 1427811446
                }],
                "success": true,
                "errors": (array)
            }

### Активировать Услугу [GET/{uid}/{activation_code}/{activation_code}/{shop_code}/ (use: api/activatecard)]

+ Parameters
    + uid (required, (int)) ... *индификатор пользователя*
    + activation_code (required, (int)) ... *код активации услуги*
    + shop_code (required, (int | max:4)) ... *код магазина*
    
+ Response 200 (application/json)

    + Headers

            Location: api/activatecard?uid=123525&activation_code=245464566542164
            Method: GET

    + Body
    
            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках
            "errors" - подарки

    + Schema

            {
                "success": true,
                "errors": (array),
                "gift": (array)
            }

### Получить данные о бекапе [GET/{uid}/ (use: api/getinfo_backup)]

+ Parameters
    + uid (required, (int)) ... *идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/getinfo_backup?uid=123525
            Method: GET

    + Body

            "isbackup" - статус бекапа
            "date" - дата создания бекапа (timestamp или 0 если нет бекапа)

    + Schema

            {
                "success" :true,
                "errors": (array),
                "isbackup": 1,
                "date": 1130304721
            }

### Записать данные о бекапе [GET/{uid}/{isbackup}/{date}/ (use: api/putinfo_backup)]

+ Parameters
    + uid (required, (int)) ... *идентификатор пользователя*
    + isbackup (required, (string)) ... *статус бекапа*
    + date (required,  (timestamp)) ... *дата создания бекапа string*
    
+ Response 200 (application/json)

    + Headers

            Location: api/putinfo_backup?uid=123525&isbackup=1&date=1130304721
            Method: GET

    + Body

            "success" - результат операции (true/false)
            "errors" - массив содержащий сообщения об ошибках

    + Schema

            {
                "success": true,
                "errors": (array)
            }

### Формат ошибок [GET/ (use: base/mobile_api/bonuses/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/bonuses/get
            Method: GET

    + Body
            
            Ошибки возвращаются в соответствии со стандартом JSON-RPC. 
            Пример возвращаемой ошибки, связанной с неверной регистрацией:

            Все ошибки характеризуются тремя полями:
                "error.message" - строковой код ошибки
                "error.data" - детальное описание ошибки
                "error.code" - в дальнейшем называется числовым кодом ошибки

    + Schema
    
            {
                "error":
                    {
                        "code": 1,
                        "message": "authenticationError",
                        "data": "Wrong login or password"
                    }
            }

### Получить системные уведомления пользователя [GET/{uid} (use: api/notifications)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/notifications?uid=XXXX
            Method: GET

    + Body

            "notification_id" - идентификатор уведомления
            "title" - заголовок уведомления
            "description" - текст уведомления
            "publish_date" - дата уведомления

    + Schema

            {
                "notifications":
                [
                    {
                        "notification_id": 1,
                        "title": ”Мастер класс по фотографии",
                        "description": "Мастер класс от лучших мастеров…",
                        "publish_date": 1427811446,
                    }
                ],
                "success": true, 
                "errors": (array)
            }

### Синхронизировать системные уведомления пользователя [POST/(ANY)/{uid}/{notifications}/ (use: api/sync-notifications)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + notifications (required) ... *массив объектов, где **action** = **delete** (уведомление удалено пользователем),  **action** = **read** (уведомление прочитано пользователем), **id** (идентификатор уведомления полученный ранее запросом **"API_URL/notifications"**)*
    
+ Response 200 (application/json)

    + Headers

            Location: api/sync-notifications?uid=XXXX
            Method: ANY

    + Body

            Уведомляем сервер одним запросом об изменениях в статусе "notifications"

            Неправильно оформлен запрос:
                notifications%5Baction%5D=delete&notifications%5Bid%5D=735&uid=1030255

            Пример при котором все работает:
                http://pastenow.ru/2623e1d00e08ae5d191797a602cd8cbe

    + Schema
    
            **-----------------------------Пример запроса-------------------------------------**
            {
                "uid": 100020, //id пользователя
                "notifications":
                [ //массив объектов уведомлений
                    {
                        "id": 235,
                        "action": "delete" //удалено
                    }
                ],
                "id": 236,
                "action": "read" //прочитано
            },
            {
                "id": 237,
                "action": "read"
            }

            **-----------------------------Пример ответа-------------------------------------**

            {
                "success": true,
                "errors": (array),
                "notice" : "Иногда cодержит заметки разработчика PHP"
            }

### Сохранить бэкап-ссылку для приложения [POST/{backup_link} (use: base/mobile_api/user/update_backup_link)]

+ Parameters
    + backup_link: `http://backup.su?key=value` (required, (string)) - *app backup-link -*

+ Response 200 (application/json)

    + Headers
    
            Location: base/mobile_api/user/update_backup_link
            Method: POST

    + Schema
            
            **================================FAILS======================================**
            ERROR CODE: 120
            **------Parameter 'backup_link' is required------**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 120,
                        "message": "Parameter 'backup_link' is required",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 121
            **------Something went wrong! Can't write to DB------**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 121,
                        "message": "Something went wrong! Can't write to DB",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            **============================SUCCESSFULLY===================================**
            {
                "success": true,
                "status": true,
                "errors": []
            }

# PRS API [/api]
<hr/>

### Получить статус [POST/{uid}/ (use: api/prs_getstatus)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getstatus
            Method: POST

### Получить список услуг [POST/{uid} (use: api/prs_getservices)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getservices
            Method: POST
            
### Отправить заявку [POST/{uid}/{service_id}/{username}/{phone}/{comment}/ (use: api/prs_sendrequest)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор сервиса*
    + username (required) ... *логин пользователя*
    + phone (required) ... *телефон пользователя*
    + comment (required) ... *комментарий*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_sendrequest
            Method: POST
            
### Получить список заявок для выбранной услуги [POST/{uid}/{service_id}/ (use: api/prs_getrequests)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + service_id (required, (int)) ... *идентификатор сервиса*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_getrequests
            Method: POST
            
### Активация услуги [POST/{uid}/{code}/{shope_code}/{gift}/ (use: api/prs_activateservice)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + code (required) ... *код*
    + shope_code (required, (number)) ... *код магазина*
    + gift (required) ... *подарок*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_activateservice
            Method: POST
            
### Оценить качество [POST/{uid}/{request_id}/{rating}/{comment}/ (use: api/prs_setgrade)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + request_id (required, (int)) ... *идентификатор запроса*
    + rating (required) ... *рейтинг*
    + comment (required) ... *комментарий*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_setgrade
            Method: POST
            
### Создать услугу (кастомный метод) [POST/{uid}/{passw}/{code}/{shopping_date}/{product_name}/ (use: api/prs_createservice)]

+ Parameters
    + uid (required, (int)) ... *уникальный идентификатор пользователя*
    + passw (required) ... *пароль*
    + code (required) ... *код*
    + shopping_date (required) ... *дата/время шопинга*
    + product_name (required) ... *имя продукта*
    
+ Response 200 (application/json)

    + Headers

            Location: api/prs_createservice
            Method: POST
            
# Gift API [/base/mobile_api/gifts/]
<hr>

**Error codes:**

**300** - *No codes for this gift type*

**301** - *type_id is required*

**302** - *Invalid XML-file*

**130** - *Parameter 'code_id' is required and must be an integer*

**121** - *Something went wrong! Can't write to DB*

**122** - *Something went wrong! Can't write to DB. Check your code_id*

### Get available types [GET/ (use: base/mobile_api/gifts/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/gifts/get
            Method: GET
                    
    + Schema
           
            **-------------------IF USER HAVE AVAILABLE GIFTS-------------------**
            
            {
                "success": true,
                "errors": [],
                "types": 
                [
                    {
                        "id": 1,
                        "title": "iTV",
                        "description": "iTV description",
                        "image_link": "http://iTV"
                    },
                    {
                        "id": 3,
                        "title": "ZORO",
                        "description": "ZORO ZORO",
                        "image_link": "http://exampleLink"
                    }
                ]
            }
            
            **-------------------IF USER HAVEN'T AVAILABLE GIFTS----------------**
            
            {
                "success": true,
                "errors": [],
                "types": []
            }
            
            



### Activate code [POST/{type_id} (use: base/mobile_api/gifts/activate)]

+ Parameters
    + type_id (required, (int)) ... *идентификатор типа*

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/gifts/activate
            Method: POST
        

    + Schema
    
            **-------------------SUCCESSFUL CODE ACTIVATION-------------------**
            
            {
                "success": true,
                "errors": [],
                "code": "666666666",
                "app_link": "https://somelink.com",
                "activation_success_text": "Some custom text related to the gitft_type"
            }
            
            **------------------USER HAVEN'T AVAILABLE GIFTS------------------**
            
            {
                "success": false,
                "errors": 
                [{
                    "code": 301,
                    "message": "User haven't available gifts",
                    "data": ""
                }]
            }
            
            **-------------------NO CODES FOR THIS TYPE----------------------**
            
            {
                "success": false,
                "errors": 
                [{
                    "code": 300,
                    "message": "No codes for iTV",
                    "data": ""
                }]
            }
            
            


### Clear user's gifts  [POST/ (use: base/mobile_api/gifts/clear)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/gifts/clear
            Method: POST

    + Schema

            {
            
            **-------------------SUCCESSFUL RESET USER'S AVAILABLES GIFTS -------------------**
            
                {
                    "success": true,
                    "errors": []
                }
            }

### Get user's codes [GET/ (use: base/mobile_api/gifts/user/all)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/gifts/user/all
            Method: GET

    + Schema
    
            **----------------IF USER HASN'T CODES-----------------**
            {
                "success": true,
                "errors": [],
                "data": []
            }
            
            **----------------IF USER HAS CODES-----------------**
            {
                "success": true,
                "errors": [],
                "data": [
                    {
                        "id": 18036,
                        "user_id": 1090122,
                        "code": "2323",
                        "created_at": "2018-03-16 13:56:18",
                        "updated_at": "2018-03-16 13:56:18",
                        "viewed": 1,
                        "type": {
                            "id": 3,
                            "title": "Third type",
                            "description": "RRRRRRRRRRRRRRRRRR",
                            "image_link": "8d60a53828d59f85638b2d55e196ba74.jpg",
                            "app_link": "RRRRRRRRRRRRRR"
                        }
                    },
                    {
                        "id": 18041,
                        "user_id": 1090122,
                        "code": "2323",
                        "created_at": "2018-03-16 14:02:30",
                        "updated_at": "2018-03-16 14:02:30",
                        "viewed": 1,
                        "type": {
                            "id": 4,
                            "title": "Metallic",
                            "description": "Metall",
                            "image_link": "4a9e48fdfe7b34982a908c691babc7c6.jpg",
                            "app_link": "Metall"
                        }
                    }
                ]
            }

### View code [POST/{code_id} (use: base/mobile_api/gifts/view)]

In View code method **code_id** is required

+ Parameters
    + code_id: `18037` (required, (int)) - *code id -*

+ Response 200 (application/json)
    
    + Headers

            Location: base/mobile_api/gifts/view
            Method: POST

    + Schema
    
            **==========================UNSUCCESSFULLY==========================**
            
            ERROR CODE: 130
            **----Parameter 'code_id' is required and must be an integer----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 130,
                        "message": "Parameter 'code_id' is required and must be an integer",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 121,
            **-----------Something went wrong! Can't write to DB-----------**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 121,
                        "message": "Something went wrong! Can't write to DB",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            ERROR CODE: 122,
            **---Something went wrong! Can't write to DB. Check your code_id---**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 122,
                        "message": "Something went wrong! Can't write to DB. Check your code_id",
                        "data": "Приносим извинения за временные неудобства, сервер не может обработать данный запрос на текущий момент"
                    }
                ]
            }
            
            **===========================SUCCESSFULLY===========================**
            
            {
                "success": true,
                "status": true,
                "errors": []
            }

# Bonus API [/base/mobile_api/bonuses]
<hr>

**Error codes:**

**10** - *Not authorized*

**11** - *Can't connect to server*

**12** - *Invalid XML-file*

**13** - *Empty name*

**14** - *Invalid card number*

**15** - *Invalid phone number*

**16** - *Not relevance data*

**17** - *User haven't cards*

**18** - *Key card_id is required*

**19** - *Card not found*

**20** - *You alredy save this card before*

* **NOTE #1:** *Every **card's array** has key **"available"**.*

*If **available=1**, then everything is fine.* 

*If **available=0**, then our card info and their server's info do not match.* 

* **NOTE #2:** *In methods **add** and **delete** have been added messages:*

*In **add:** "Карта успешно добавлена".* 

*In **remove:** "Карта успешно удалена".* 

### COMMON ERRORS [PUT]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/bonuses/*

    + Schema
            
            ERROR CODE: 10
            **-------------------NOT AUTHORIZED-------------------**
                {
                    "success": false,
                    "errors": [
                        {
                            "code": 10,
                            "message": "Not authorized",
                            "data": "Необходимо авторизоваться"
                        }
                    ]
                }
                
            ERROR CODE: 11
            **----------------CAN'T CONNECT TO SERVER-----------------**
                {
                    "success": false,
                    "errors": {
                        "code": 11,
                        "message": "Can't connect to server",
                        "data": "Не удалось подключиться к серверу"
                    },
                    "cards": []
                }

            ERROR CODE: 12
            **----------------INVALID XML-FILE-----------------**
                {
                    "success": false,
                    "errors": {
                        "code": 12,
                        "message": "Invalid XML-file",
                        "data": "Ошибка сервера"
                    },
                    "cards": []
                }
                
### Get all user's cards [GET/ (use: base/mobile_api/bonuses/get)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/bonuses/get
            Method: GET

    + Schema
    
            **==============================FAILS=====================================**
            
            ERROR CODE: 17
            **-----------------------USER HAVEN'T CARDS------------------------**  
                {
                    "success": true,
                    "errors": {
                        "code": 17,
                        "message": "User haven't cards",
                        "data": "У вас ещё нет действующих карт"
                    },
                    "cards": []
                }
    
            **===========================SUCCESSFULLY=================================**

            **-----------------------RETURNED LIST OF CARDS ------------------------** 
                {
                    "success": true,
                    "errors": [],
                    "cards": [
                        {
                            "id": 1,
                            "name": "Проскурский Сергей Сергеевич",
                            "card": "000000704040",
                            "phone": "375291114804",
                            "data": {
                                "activeBonuses": 15852,
                                "nextActivationDate": "2018-04-06T00:00:00+03:00",
                                "nextActivationSum": 440,
                                "nextCancelingDate": "2018-08-27T00:00:00+03:00",
                                "nextCancelingSum": 250,
                                "nonActiveBonuses": 440
                            },
                            "available": 1
                        },
                        {
                            "id": 4,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 2040,
                                "nextActivationDate": null,
                                "nextActivationSum": 0,
                                "nextCancelingDate": "2018-09-19T00:00:00+03:00",
                                "nextCancelingSum": 2040,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }

### Add new card [POST/ (use: base/mobile_api/bonuses/add)]

In add method **name**, **card** and **phone** are required.

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/bonuses/add
            Method: POST
            Request: (string)name, (numeric)card, (int)phone

    + Schema

            **=========================FAILS=================================**
               
            ERROR CODE: 13
            **-----------------------EMPTY NAME-----------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 13,
                        "message": "Empty name",
                        "data": "Введи ваше полное имя"
                    },
                    "cards": []
                }
                
            ERROR CODE: 14
            **-------------------INVALID CARD NUMBER-------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 14,
                        "message": "Invalid card number",
                        "data": "Введите корректный номер карты"
                    },
                    "cards": []
                }
                
            ERROR CODE: 15
            **-------------------INVALID PHONE NUMBER-------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 15,
                        "message": "Invalid phone number",
                        "data": "Введите корректный номер телефона"
                    },
                    "cards": []
                }
            
            ERROR CODE: 16
            **--------------------NOT RELEVANCE DATA--------------------**
                {
                    "success": true,
                    "errors": {
                        "code": 16,
                        "message": "Not relevance data",
                        "data": "Карта с указанными данными не найдена"
                    },
                    "cards": []
                }


            **=========================SUCCESSFULLY=================================**
            
            **---------------RETURNED LIST OF CARDS WITH ADDED NEW------------------**            
                {
                    "success": true,
                    "errors": [],
                    "message": "Карта успешно добавлена",
                    "cards": [
                        {
                            "id": 6,
                            "name": "Пичугина Александра Олеговна",
                            "card": "",
                            "phone": "",
                            "data": [],
                            "available": 0
                        },
                        {
                            "id": 7,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        },
                        {
                            "id": 9,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }

### Remove card [POST/ (use: base/mobile_api/bonuses/remove)] 

In remove method **card_id** is required.

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/bonuses/remove
            Method: POST
            Request: (int)card_id

    + Schema
    
            **==================================FAILS====================================**
            
            ERROR CODE: 18
            **--------------------------CARD NOT FOUND IN DB-----------------------------**            
                {
                    "success": true,
                    "errors": {
                        "code": 19,
                        "message": "Key card_id is required",
                        "data": ""
                    },
                    "cards": []
                }
            
            ERROR CODE: 19
            **--------------------------CARD NOT FOUND-----------------------------**            
                {
                    "success": true,
                    "errors": {
                        "code": 19,
                        "message": "Card not found",
                        "data": "Карта не найдена"
                    },
                    "cards": []
                } 
               
               
            **============================SUCCESSFULLY=================================**

            **----------------RETURNED LIST OF CARDS WITHOUT REMOVED------------------**            
                {
                    "success": true,
                    "errors": [],
                    "message": "Карта успешно удалена",
                    "cards": [
                        {
                            "id": 6,
                            "name": "Пичугина Александра Олеговна",
                            "card": "",
                            "phone": "",
                            "data": [],
                            "available": 0
                        },
                        {
                            "id": 7,
                            "name": "Пичугина Александра Олеговна",
                            "card": "000000000060",
                            "phone": "375298704393",
                            "data": {
                                "activeBonuses": 0,
                                "nextActivationDate": "2018-03-19T00:00:00+03:00",
                                "nextActivationSum": 0,
                                "nextCancelingSum": 0,
                                "nonActiveBonuses": 0
                            },
                            "available": 1
                        }
                    ]
                }
                
# Insurance API [/base/mobile_api/insurance]
<hr>

**Actions:**

&nbsp;&nbsp;&nbsp;**success** - *Everything is good*

&nbsp;&nbsp;&nbsp;**error** - *Error*

&nbsp;&nbsp;&nbsp;**auth** - *Need login*

&nbsp;&nbsp;&nbsp;**activate** - *Need activation (registration)*
<br><br>

**Available statuses of the contract:**

&nbsp;&nbsp;&nbsp;**2** - *Need confirmation by sms*

&nbsp;&nbsp;&nbsp;**3** - *Form is not filled*

&nbsp;&nbsp;&nbsp;**4** - *Completed contract*
<br><br>

**Error codes:**

Smart errors:<br>

&nbsp;&nbsp;&nbsp;**10** - *Not authorized*

&nbsp;&nbsp;&nbsp;**100** - *unknown_error:[err, errno] (unknown error in response from Insurance)*

&nbsp;&nbsp;&nbsp;**101** - *Invalid phone number*

&nbsp;&nbsp;&nbsp;**102** - *Contract number is required*

&nbsp;&nbsp;&nbsp;**103** - *[Required parameters: ||(&&) Wrong format in:] (required parameter was not entered or(and) wrong format in fields...)*

&nbsp;&nbsp;&nbsp;**104** - *Parameters "smsid" and "otp" are required*

&nbsp;&nbsp;&nbsp;**105** - *Contract not found*

&nbsp;&nbsp;&nbsp;**106** - *Too long connection*

&nbsp;&nbsp;&nbsp;**700** - *Server error, data was not received*

<br>Insurance errors:<br>

&nbsp;&nbsp;&nbsp;**401** - *Wrong phone number*

&nbsp;&nbsp;&nbsp;**402** - *Phone number not found*

&nbsp;&nbsp;&nbsp;**411** - *No contract number*

&nbsp;&nbsp;&nbsp;**412** - *Contract number already used*

&nbsp;&nbsp;&nbsp;**415** - *Invalid contract number*

&nbsp;&nbsp;&nbsp;**416** - *Wrong phone number*

&nbsp;&nbsp;&nbsp;**421** - *Incorrect one-time password*

&nbsp;&nbsp;&nbsp;**422** - *One-time password not found*

&nbsp;&nbsp;&nbsp;**423** - *Contract not found*

&nbsp;&nbsp;&nbsp;**424** - *One-time password already used'*

&nbsp;&nbsp;&nbsp;**431** - *Contract not found*

&nbsp;&nbsp;&nbsp;**432** - *Invalid index*

&nbsp;&nbsp;&nbsp;**433** - *No index*

&nbsp;&nbsp;&nbsp;**434** - *Area not found*

&nbsp;&nbsp;&nbsp;**435** - *Area not found*

&nbsp;&nbsp;&nbsp;**436** - *Settlement not found*

&nbsp;&nbsp;&nbsp;**437** - *Settlement not found*

&nbsp;&nbsp;&nbsp;**438** - *Street not found*

&nbsp;&nbsp;&nbsp;**439** - *Street not found*

&nbsp;&nbsp;&nbsp;**441** - *Verification code not found*

&nbsp;&nbsp;&nbsp;**442** - *Verification code already used*

&nbsp;&nbsp;&nbsp;**453** - *Invalid token*

&nbsp;&nbsp;&nbsp;**454** - *Token for another number*

&nbsp;&nbsp;&nbsp;**511** - *Database error, the contract was not added*

&nbsp;&nbsp;&nbsp;**512** - *One-time password was not added*

&nbsp;&nbsp;&nbsp;**513** - *The status of the contract isn\'t changed*

&nbsp;&nbsp;&nbsp;**522** - *One-time password not used*

<br><br>

**NOTE #1:** *Each response has key* ***action***, *its values:* ***auth***, ***activate***, ***error***, ***success***  

### LIST ERRORS [PUT]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/*

    + Schema

            =====================Smart errors=======================
            
            ERROR CODE: 10
            **-------------------Not authorized-------------------**
                {
                    "success": false,
                    "action": "auth",
                    "errors": [{
                        "code": 10,
                        "message": "Not authorized",
                        "data": "Необходимо авторизоваться"
                    }],
                    "data": []
                }
                
            ERROR CODE: 100
            **------------------Unknown error------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 100,
                        "message":  
                            "unknown_error:" => {
                                "errno" => 123,
                                "err" => "Error text",
                            },
                        "data": "Неизвестная ошибка"
                    }],
                    "data": []
                }
                
            ERROR CODE: 101
            **----------------Invalid phone number--------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 101,
                        "message": "Invalid phone number"
                        "data": "Введите корректный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 102
            **------------Contract number is required-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 102,
                        "message": "Contract number is required",
                        "data": "Введите корректный номер договора"
                    }],
                    "data": []
                }
                
            ERROR CODE: 103
            **-----------Required params/Wrong format----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [
                        {
                            "code": 103,
                            "message": {
                                "require": "Required parameters: cid, name, passport, passportdate, model",
                                "wrong_format": "Wrong format in: email, index"
                            },
                            "data": "Введите корректные данные"
                        }
                    ],
                    "data": []
                }
                
            ERROR CODE: 104
            **----Parameters "smsid" and "otp" are required----**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 104,
                        "message": "Parameters "smsid" and "otp" are required",
                        "data": "Ошибка сервера"
                    }],
                    "data": []
                }
                
            ERROR CODE: 105
            **---------------Contract not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 105,
                        "message": "Contract not found",
                        "data": "Ошибка сервера, указанный контракт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 106
            **---------------Too long connection--------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [
                        {
                            "code": 106,
                            "message": "Too long connection",
                            "data": "Ошибка сервера, данные не были получены"
                        }
                    ],
                    "data": []
                }
                
            ERROR CODE: 700
            **-------Server error, data was not received-------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 700,
                        "message": "Server error, data was not received",
                        "data": "Ошибка сервера, данные не были получены"
                    }],
                    "data": []
                }

            ==================Insurance errors====================
                
            ERROR CODE: 401
            **----------------Wrong phone number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 401,
                        "message": "Wrong phone number",
                        "data": "Неверный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 402
            **--------------Phone number not found--------------**
                {
                    "success": true,
                    "action": "activate",
                    "errors": [{
                        "code": 402,
                        "message": "Phone number not found",
                        "data": "Номер телефона не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 411
            **----------------No contract number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 411,
                        "message": "No contract number",
                        "data": "Номер договора отсутствует"
                    }],
                    "data": []
                }
                
            ERROR CODE: 412
            **-----------Contract number already used-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 412,
                        "message": "Contract number already used",
                        "data": "Номер договора уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 415
            **--------------Invalid contract number-------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 415,
                        "message": "Invalid contract number",
                        "data": "Неверный номер договора"
                    }],
                    "data": []
                }
                
            ERROR CODE: 416
            **----------------Wrong phone number----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 416,
                        "message": "Wrong phone number",
                        "data": "Неверный номер телефона"
                    }],
                    "data": []
                }
                
            ERROR CODE: 421
            **------------Incorrect one-time password------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 421,
                        "message": "Incorrect one-time password",
                        "data": "Неверный одноразовый пароль"
                    }],
                    "data": []
                }
                
            ERROR CODE: 422
            **------------One-time password not found------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 422,
                        "message": "One-time password not found",
                        "data": "Одноразовый пароль не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 423
            **---------------Contract not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 423,
                        "message": "Contract not found",
                        "data": "Договор не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 424
            **----------One-time password already used----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 424,
                        "message": "One-time password already used",
                        "data": "Одноразовый пароль уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 431
            **---------------Contract not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 431,
                        "message": "Contract not found",
                        "data": "Договор не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 432
            **------------------Invalid index-------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 432,
                        "message": "Invalid index",
                        "data": "Неверный индекс"
                    }],
                    "data": []
                }
                
            ERROR CODE: 433
            **--------------------No index----------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 433,
                        "message": "No index",
                        "data": "Индекс отсутствует"
                    }],
                    "data": []
                }
                
            ERROR CODE: 434
            **------------------Area not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 434,
                        "message": "Area not found",
                        "data": "Район не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 435
            **------------------Area not found------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 435,
                        "message": "Area not found",
                        "data": "Район не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 436
            **---------------Settlement not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 436,
                        "message": "Settlement not found",
                        "data": "Населенный пункт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 437
            **---------------Settlement not found---------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 437,
                        "message": "Settlement not found",
                        "data": "Населенный пункт не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 438
            **-----------------Street not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 438,
                        "message": "Street not found",
                        "data": "Улица не найдена"
                    }],
                    "data": []
                }
                
            ERROR CODE: 439
            **-----------------Street not found-----------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 439,
                        "message": "Street not found",
                        "data": "Улица не найдена"
                    }],
                    "data": []
                }
                
            ERROR CODE: 441
            **-----------Verification code not found-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 441,
                        "message": "Verification code not found",
                        "data": "Код подтверждения не найден"
                    }],
                    "data": []
                }
                
            ERROR CODE: 442
            **---------Verification code already used---------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 442,
                        "message": "Verification code already used",
                        "data": "Код подтверждения уже использован"
                    }],
                    "data": []
                }
                
            ERROR CODE: 453
            **-----------------Invalid token------------------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 453,
                        "message": "Invalid token",
                        "data": "Неверный токен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 454
            **------------Token for another number------------**
                {
                    "success": true,
                    "action": "auth",
                    "errors": [{
                        "code": 454,
                        "message": "Token for another number",
                        "data": "Ошибка сервера, токен для другого номера"
                    }],
                    "data": []
                }
                
            ERROR CODE: 511
            **---Database error, the contract was not added---**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 511,
                        "message": "Database error, the contract was not added",
                        "data": "Ошибка базы данных, договор не был добавлен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 512
            **---------One-time password was not added--------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 512,
                        "message": "One-time password was not added",
                        "data": "Одноразовый пароль не добавлен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 513
            **----The status of the contract isn\'t changed----**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 513,
                        "message": "The status of the contract isn\'t changed",
                        "data": "Статус договора не изменен"
                    }],
                    "data": []
                }
                
            ERROR CODE: 522
            **-----------One-time password not used-----------**
                {
                    "success": true,
                    "action": "error",
                    "errors": [{
                        "code": 522,
                        "message": "One-time password not used",
                        "data": "Одноразовый пароль не использован"
                    }],
                    "data": []
                }

### Auth [POST/{tel}/ (use: base/mobile_api/insurance/auth)]

In auth method **tel** is required

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/auth
            Method: POST
            Request: tel

    + Schema
    
            {
                "success": true,
                "action": "auth",
                "errors": [],
                "data": [
                    {
                        "smsid": 446,
                        "expire": 1520064760
                    }
                ]
            }

### Activate [POST/{tel}/{num}/ (use: base/mobile_api/insurance/activate)]

In activate method **tel** and **num** are required

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*
    + num (required, (string), `SGTS06000011`) ... *contract number -*

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/activate
            Method: POST
            Request: tel, num

    + Schema
    
            {
                "success": true,
                "action": "auth",
                "errors": [],
                "data": [
                    {
                        "cid": 45,
                        "smsid": 449,
                        "expire": 1520073617
                    }
                ]
            }

### Sms confirm (otp) [POST/{smsid}/{otp}/{cid}/ (use: base/mobile_api/insurance/sms_confirm)]

In sms confirm method **smsid** and **otp** are required, and if from method ***Activate*** parameter **cid** required too

+ Parameters
    + smsid (required, (int), `509`) ... *sms id -*
    + otp (required, (string), `834741`) ... *sms otp -*
    + cid (optional, (int), `36`) ... *contract id (required, if from method @Activate) -*

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/sms_confirm
            Method: POST
            Request: smsid, otp, cid

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                            {
                                "cid": "3",
                                "num": "SGTS06000011",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/jwmod",
                                "brand": "Apple",
                                "model": "Android 10",
                                "serial": "IMEI923089823728937",
                                "expire": 1537090484,
                                "amount": "2500.00",
                                "name": "Name",
                                "secname": "Secname"
                            },
                            {
                                "cid": "15",
                                "num": "SGTS12000030",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/Gg9lQ",
                                "brand": "MEIZU",
                                "model": "m2",
                                "serial": "867576024920705",
                                "expire": 1553003619,
                                "amount": "12000.00",
                                "name": "Илья",
                                "secname": "Илья"
                            }
                        ]
            }

### Sign form [POST/{cid}/{name}/{secname}/{surname}/{email}/{inn}/{birthday}/{type}/{passport}/{passportdate}/{passportissued}/{index}/{region}/{district}/{city}/{street}/{brand}/{model}/{serial}/ (use: base/mobile_api/insurance/sign_form)]

In sign form method:

Request: **cid**, **name**, **secname**, **surname**, **email**, **inn**, 
**birthday**, **type**, **passport**, **passportdate**, **passportissued**, **index**, **region**, 
**district**, **city**, **street**, **brand**, **model**, **serial**

Required: **cid**, **name**, **secname**, **surname**, **birthday**, **type**, 
**passport**, **passportdate**, **passportissued**, **region**, **district**, **city**, **brand**, 
**model**, **serial**

Not required: **email**, **inn**, **index**, **street**

+ Parameters
    + cid (required, (int), `37`) ... *contract id -*
    + name (required, (string), `Bill`) ... *name -*
    + secname (required, (string), `Bobovich`) ... *secname -*
    + surname (required, (string), `Jhonson`) ... *surname -*
    + email (optional, (string), `mail@gmail.com`) ... *email -*
    + inn (optional, (int), `1112212321`) ... *inn -*
    + birthday (required, (string), `31.12.2022`) ... *birthday date -*
    + type: `1` (required, (int)) - *type (passport or card number) -*
        + Members
            - `1`
            - `2`
    + passport (required, (string), `АВ123456`) ... *passport -*
    + passportdate (required, (string), `10.12.2018`) ... *passportdate date -*
    + passportissued (required, (string), `RO MVD Voenkom`) ... *passportissued -*
    + index (optional, (int), `49000`) ... *index -*
    + region (required, (string), `Dnepropetrovskiy`) ... *region -*
    + district (required, (string), `Dnepr`) ... *district -*
    + city (required, (string, `Dnepr`)) ... *city -*
    + street (optional, (string), `Shevchenko`) ... *street -*
    + brand (required, (string), `Apple`) ... *brand -*
    + model (required, (string), `Android 10`) ... *model -*
    + serial (required, (string), `IMEI923089823728937`) ... *serial -*

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/sign_form
            Method: POST
            Request: cid, name, secname, surname, email, inn, birthday, type, passport, passportdate, passportissued, index, region, district, city, street, bran, model, serial

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                    {
                        "status": 4,
                        "pdf": "https://dev.digins.ua/pdf/mZaeF"
                    }
                ]
            }

### List [POST/{tel}/{cid}/ (use: base/mobile_api/insurance/get_list_contracts)]

In method list **tel** is required. If you whant get one contract add to request **cid**.

+ Parameters
    + tel (required, (int), `3805012312312`) ... *phone number -*
    + cid (optional, (int), `3`) ... *contract number -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/list
            Method: POST
            Request: tel, cid

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "data": [
                            {
                                "cid": "3",
                                "num": "SGTS06000011",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/jwmod",
                                "brand": "Apple",
                                "model": "Android 10",
                                "serial": "IMEI923089823728937",
                                "expire": 1537090484,
                                "amount": "2500.00",
                                "name": "Name",
                                "secname": "Secname"
                            },
                            {
                                "cid": "15",
                                "num": "SGTS12000030",
                                "status": "4",
                                "pdf": "https://dev.digins.ua/pdf/Gg9lQ",
                                "brand": "MEIZU",
                                "model": "m2",
                                "serial": "867576024920705",
                                "expire": 1553003619,
                                "amount": "12000.00",
                                "name": "Илья",
                                "secname": "Илья"
                            }
                ]
            }

### Check filled contracts [POST// (use: base/mobile_api/insurance/check_filled_contracts)]
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/insurance/check_filled_contracts
            Method: POST

    + Schema
    
            {
                "success": true,
                "action": "success",
                "errors": [],
                "filled": 1 //(or 0, if no filled)
            }

### Send push Errors [PUT/ (use void)]

+ Response 200

    + Body
    
            В ответе сервера могут быть указаны ошибки в массиве.
            Если массив ошибок пуст то запрос выполнен успешно.

            Обьект ошибки имеет следующие параметры:
                "code" - int - Код ошибки
                "message" - string - Тест ошибки
            
            Пример ответа с ошибкой
                {
                    "message": "Ошибка отправки сообщения",
                    "errors": [
                        {
                            "code": 4,
                            "message": "Параметр text_uk не может быть пустым",
                        },
                        {
                            "code": 3,
                            "message": "Параметр text_ru не может быть пустым",
                        },
                    ]
                }

            Список ошибок
                1 Не верный ключ
                2 Номер договора не может быть пустым
                3 Параметр text_ru не может быть пустым
                4 Параметр text_uk не может быть пустым
                5 Нет клиента с данным номером договора
                6 Нет токена для связи с устройством или его срок действия истек
                7 Не верный формат списка договоров


### Send push to app [POST/{cid}/{public_key}/{text_ru}/{text_uk}/ (use: base/api/insurance/insurance/send_push)]

+ Parameters
    + cid (required, (string), `2`) ... *ID контракта/договора в системе -*
    + public_key (required, (int), `3`) ... *Ключ доступа -*
    + text_ru (required, (int), `3`) ... *Текст сообщения на русском -*
    + text_uk (required, (int), `3`) ... *Текст сообщения на украинском -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/insurance/send_push
            Method: POST

    + Body 

            {
            "cid": "2",
            "text_ru": "Договор истекает через 3 дня",
            "text_uk": "Договір закінчується через 3 дні",
            "public_key": "some_key"
            }

    + Schema
    
            {
                "data": "Ошибка отправки сообщения",
                "errors": [
                    {
                        "code": 4,
                        "message": "Параметр text_uk не может быть пустым",
                    },
                ]
            }


### Send push to multiple divaces [POST/{cids}/{public_key}/{text_ru}/{text_uk}/ (use: base/api/insurance/insurance/send_push_multiple)]
    
+ Parameters
    + cids (required, (array), `2`) ... *Массив ID контрактов/договоров в системе -*
    + public_key (required, (int), `somekey`) ... *Ключ доступа -*
    + text_ru (required, (int), `3`) ... *Текст сообщения на русском -*
    + text_uk (required, (int), `3`) ... *Текст сообщения на украинском -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/insurance/send_push_multiple
            Method: POST

    + Body 

            {
            "text_ru":"Договор истекает через 3 дня",
            "text_uk":"Договір закінчується через 3 дні",
            "public_key":"some_key",
            "cids": ["1003","1004"]
            }

    + Schema
    
            {
                "cids": [
                    {
                        "cid": 1003,
                        "data": 'Сообщение не отправлено',
                        "errors": [
                            {
                                "code": 6,
                                'message' => 'Нет токена для связи с устройством или его срок действия истек '
                            }
                        ]
                    },
                    {
                        "cid": 1004,
                        "data": 'Сообщение отправлено',
                        "errors": []
                    }
                ],
                "data": "Запрос выполнен успешно",
                "errors": [
                    {
                        "code": 4,
                        "message": "Параметр text_uk не может быть пустым"
                    }
                ],
            }

### Send push to multiple divaces [POST/{cids}/{public_key}/ (use: base/api/insurance/insurance/send_push_multiple_personalized)]
    
+ Parameters
    + cids (required, (array), `2`) ... *Массив ID контрактов/договоров в системе -*
    + public_key (required, (int), `somekey`) ... *Ключ доступа -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/api/insurance/insurance/send_push_multiple_personalized
            Method: POST

    + Body 

            {
            "public_key": "some_key",
            "cids": [
            {
            "text_ru": "Договор 1002 истекает через 3 дня",
            "text_uk": "Договір 1002 закінчується через 3 дні",
            "cid": "1006"
            },
            {
            "text_ru": "Договор 1003 истекает через 3 дня",
            "text_uk": "Договір 1003 закінчується через 3 дні",
            "cid": "1005"
            }
            ]
            }

    + Schema
    
            {
                "cids": [
                    {
                        "cid": "1002",
                        "data": "Сообщение отправлено",
                        "errors": []
                    },
                    {
                        "cid": "1005",
                        "data": "Ошибка отправки сообщения",
                        "errors": [
                            {
                                "code": 5,
                                "message": "Нет клиента с данным номером договора"
                            }
                        ]
                    }
                ],
                "data": "Запрос выполнен успешно",
                "errors": []
            } 


# Chat API [/base/mobile_api/messages]
<hr/>

### Get messages chunk [POST/{page}/{count}/  (use: base/mobile_api/messages/chunk)]

**NOTE #1:** *This method has key a **count** (messages count), if query has't a count, then **count=25** (default)*

**NOTE #2:** *If query contains a key **page**, then you get messages from this page in response. If not, then you get **count** last messages*

Keys **page** and **count** are not required

+ Parameters
    + count: `5` (optional, (int)) - *messages count -*
        + Default: `25`
    + page: `2` (optional, (int)) - *page number -*
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/messages/chunk
            Method: POST
            Request: count, page
            
    + Body

            display - count of displayed messages
            quantity - total count of messages
            conv_id (if conv_id=0 - dialog isn't active)


    + Schema

            **============================SUCCESSFULLY=================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": 3,
                "total": 6,
                "current_page": 1,
                "last_page": 2,
                "conv_id" => 23231,
                "data": [
                    {
                        "id": 225485,
                        "name": "Илья Дегтяренко",
                        "message": "Илья входит в чат.",
                        "user": null,
                        "convid": 17578,
                        "time": 1520846666,
                        "class": "notice",
                        "attached_file": "http://...../test.jpg",
                        "plevel": 1,
                        "is_read": 1,
                        "is_uread": 1
                    },
                    {
                        "id": 225486,
                        "name": "Илья Дегтяренко",
                        "message": "Во всех телевизорах выпуска 2016 года используются hdmi разъемы стандарта 1.4<br />\nВ hdmi 1.4 реализована поддержка разрешения 4K х 2К (3840×2160 при 24/25/30 Гц и 4096×2160 при 24 Гц);",
                        "user": "23::380505765684",
                        "convid": 17578,
                        "time": 1520846673,
                        "class": "admin",
                        "attached_file": "http://...../test2.jpg",
                        "plevel": 1,
                        "is_read": 1,
                        "is_uread": 1
                    }
                ]
            }
            
            **==================================FAILS====================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id" => 0,
                "data": []
            }

### Upload file [POST/{conv_id}/{file}/  (use: base/mobile_api/files/upload)]

Key **conv_id** and **file** are required

+ Parameters
    + conv_id ((int), `102922`) ... *dialog id -* 
    + file ((file), `{file}`) ... *file to upload -* 

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/files/upload
            Method: POST
            Request: conv_id, file

    + Schema
            
            **==================================FAILS====================================**
            
            ERROR CODE: 150
            **-Parameter 'conv_id' is required and must be a integer-**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 150,
                        "message": "Parameter 'conv_id' is required and must be a integer                        
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 151
            **--Unknown chat || Chat does not belong to the user--**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 151,
                        "message": "Unknown chat || Chat does not belong to the user",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 152
            **-----------Chat is closed-----------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 152,
                        "message": "Chat is closed",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 153
            **--------Parameter 'file' is required--------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 153,
                        "message": "Parameter 'file' is required",
                        "data": "Ошибка сервера"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 154
            **--------File extension not supported--------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 154,
                        "message": "File extension not supported",
                        "data": "Поддерживаемые разрешения файла: png, jpg"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            ERROR CODE: 155
            **------Field connection with file-server------**
            {
                "success": true,
                "action": "success",
                "errors": [
                    {
                        "code": 155,
                        "message": "Field connection with file-server",
                        "data": "Отправка фотографий в данный момент недоступна"
                    }
                ],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": ""
            }
            
            **============================SUCCESSFULLY=================================**
            
            {
                "success": true,
                "action": "success",
                "errors": [],
                "display": "",
                "total": "",
                "current_page": "",
                "last_page": "",
                "conv_id": "",
                "data": []
            }

 
# Martlet API [/base/mobile_api/martlet]
<hr/>

**Innovation:**  *Returned response array will now have new key **status**, that indicates whether the request is successful or not.*

### Activate code [POST/{code} (use: base/mobile_api/martlet/store)]

Parameter **code** is required

+ Parameters
    + code: `'1234567890000000'` (required, (string))
    
+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/martlet/store
            Method: POST
            Request: code
            
            
    + Body
            
            Click on "SHOW JSON SCHEMA" to see examples of response
            
            data['dependence'] - Dependent code data

    + Schema
    
            **==================================FAILS====================================**

            ERROR CODE: 500
            **-----Something went wrong-----**
            {
                "success": false,
                "status": false,
                "errors": [
                    {
                        "code": 500,
                        "message": "Something went wrong in MartletController@store. Request method: POST. Url: mobile_api/martlet/store",
                        "data": "Ошибка сервера, данные не были получены."
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 501
            **-----Code required, must be an integer equal to 16 characters-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 501,
                        "message": "Field 'code' is required, must be an integer equal to 16 characters",
                        "data": "Введите корректный код"
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 502
            **-----This code has already been used-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 502,
                        "message": "This code has already been used",
                        "data": "Этот код уже использован"
                    }
                ],
                "data": []
            }
            
            ERROR CODE: 503
            **-----Can't find the code-----**
            {
                "success": true,
                "status": false,
                "errors": [
                    {
                        "code": 503,
                        "message": "Can't find the code",
                        "data": "Невозможно найти указанный код"
                    }
                ],
                "data": []
            }
            
            **============================SUCCESSFULLY=================================**
            
            LIST OF USER CODES
            **-----User has no codes-----**
            {
                "success": true,
                "status": true,
                "errors": [],
                "data": []
            }

            LIST OF USER CODES
            **-----User has codes-----**
            {
                "success": true,
                "status": true,
                "errors": [],
                "data": [
                    {
                        "id": 60,
                        "code": "1100000000000011",
                        "product": "ПК. Персональный (Polaris Office + NOD32 Smart Security Family)",
                        "user_id": 1090122,
                        "created_at": "2018-06-12 13:19:06",
                        "updated_at": "2018-06-12 13:19:06",
                        "dependence": [
                            {
                                "id": 24,
                                "type": "second",
                                "name": "Polaris office ESD",
                                "licence": "M963D-OSWS0-2HG80-GSEP3-CE1PD",
                                "about": "Polaris Office (multi-device)\n– это один из лучших представителей офисных программ, ключевыми чертами которого является мультиформатная поддержка и быстродействие, вне зависимости от гаджета и ОС.",
                                "created_at": "2018-06-12 13:19:06",
                                "updated_at": "2018-06-12 13:19:06",
                                "code_id": 60
                            },
                            {
                                "id": 25,
                                "type": "second",
                                "name": "ESET NOD32 Smart Security",
                                "licence": "BCAW-W334-7B4H-HA9C-388D",
                                "about": "ESET NOD32 Smart Security\nозволит сделать вашу работу в сети Интернет безопасной и максимально защищенной. Оставайтесь защищенными в социальных сетях, изучайте интернет-ресурсы, делайте покупки онлайн или просто играйте. Интеллектуальные технологии защиты позаботятся о вашей безопасности.",
                                "created_at": "2018-06-12 13:19:06",
                                "updated_at": "2018-06-12 13:19:06",
                                "code_id": 60
                            }
                        ]
                    },
                    {
                        "id": 61,
                        "code": "0000000000003333",
                        "product": "Kaspersky Internet Security 2 Device 1 year Base",
                        "user_id": 1090122,
                        "created_at": "2018-06-12 13:19:37",
                        "updated_at": "2018-06-12 13:19:37",
                        "dependence": [
                            {
                                "id": 26,
                                "type": "second",
                                "name": "Kaspersky Internet Security 2 Device 1 year Base",
                                "licence": "9X6RE-L09L7-H4483-VVOHC",
                                "about": "Kaspersky Internet Security для всех устройств (multi-device)\n– единое решение для защиты всех ваших устройств. Каким бы устройством вы ни пользовались, ваша информация всегда надежно защищена. Лицензия на 2 устройства – для самых практичных пользователей, которым достаточно всего двух устройств, чтоб преуспевать в работе, учебе или просто для развлечения. В течение всего года Kaspersky Internet Security будет защищать, например, ваш смартфон и ПК.",
                                "created_at": "2018-06-12 13:19:37",
                                "updated_at": "2018-06-12 13:19:37",
                                "code_id": 61
                            }
                        ]
                    }
                ]
            }
            
### List user codes [GET/ (use: base/mobile_api/martlet/show)]

+ Response 200 (application/json)

    + Headers

            Location: base/mobile_api/martlet/show
            Method: GET

    + Schema

                LIST OF USER CODESCha
                **-----User has no codes-----**
                {
                    "success": true,
                    "status": true,
                    "errors": [],
                    "data": []
                }
    
                LIST OF USER CODES
                **-----User has codes-----**
                {
                    "success": true,
                    "status": true,
                    "errors": [],
                    "data": [
                        {
                            "id": 60,
                            "code": "1100000000000011",
                            "product": "ПК. Персональный (Polaris Office + NOD32 Smart Security Family)",
                            "user_id": 1090122,
                            "created_at": "2018-06-12 13:19:06",
                            "updated_at": "2018-06-12 13:19:06",
                            "dependence": [
                                {
                                    "id": 24,
                                    "type": "second",
                                    "name": "Polaris office ESD",
                                    "licence": "M963D-OSWS0-2HG80-GSEP3-CE1PD",
                                    "about": "Polaris Office (multi-device)\n– это один из лучших представителей офисных программ, ключевыми чертами которого является мультиформатная поддержка и быстродействие, вне зависимости от гаджета и ОС.",
                                    "created_at": "2018-06-12 13:19:06",
                                    "updated_at": "2018-06-12 13:19:06",
                                    "code_id": 60
                                },
                                {
                                    "id": 25,
                                    "type": "second",
                                    "name": "ESET NOD32 Smart Security",
                                    "licence": "BCAW-W334-7B4H-HA9C-388D",
                                    "about": "ESET NOD32 Smart Security\nозволит сделать вашу работу в сети Интернет безопасной и максимально защищенной. Оставайтесь защищенными в социальных сетях, изучайте интернет-ресурсы, делайте покупки онлайн или просто играйте. Интеллектуальные технологии защиты позаботятся о вашей безопасности.",
                                    "created_at": "2018-06-12 13:19:06",
                                    "updated_at": "2018-06-12 13:19:06",
                                    "code_id": 60
                                }
                            ]
                        },
                        {
                            "id": 61,
                            "code": "0000000000003333",
                            "product": "Kaspersky Internet Security 2 Device 1 year Base",
                            "user_id": 1090122,
                            "created_at": "2018-06-12 13:19:37",
                            "updated_at": "2018-06-12 13:19:37",
                            "dependence": [
                                {
                                    "id": 26,
                                    "type": "second",
                                    "name": "Kaspersky Internet Security 2 Device 1 year Base",
                                    "licence": "9X6RE-L09L7-H4483-VVOHC",
                                    "about": "Kaspersky Internet Security для всех устройств (multi-device)\n– единое решение для защиты всех ваших устройств. Каким бы устройством вы ни пользовались, ваша информация всегда надежно защищена. Лицензия на 2 устройства – для самых практичных пользователей, которым достаточно всего двух устройств, чтоб преуспевать в работе, учебе или просто для развлечения. В течение всего года Kaspersky Internet Security будет защищать, например, ваш смартфон и ПК.",
                                    "created_at": "2018-06-12 13:19:37",
                                    "updated_at": "2018-06-12 13:19:37",
                                    "code_id": 61
                                }
                            ]
                        }
                    ]
                }